using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Unity.VisualScripting;
using UnityEngine;





public class ProceduralGeneration : MonoBehaviour
{

   

    public int width, height;
    // ,wheight,wwidth
    // public int minStoneHeight, maxStoneHeight;
    // public int minWaterHeight, maxWaterHeight;
    public int minWaterWidth, maxWaterWidth;
    public int minWaterHeight, maxWaterHeight;
   // [Range(0, 100)]
   // public int density = 0;
    [Range(0, 1000)]
    public int count = 0;
    [Range(0, 10)]
    public int scale = 0;
    [Range(0, 10)]
    public int mamount = 0;
    [Range(0, 10)]
    public int smsize = 0;
    [Range(0, 10)]
    public int msize = 0;
    [Range(0, 10)]
    public int msparsity = 0;
    [Range(0, 20)]
    public int famount = 0;
    [Range(0, 10)]
    public int fsize = 0;
    [Range(0, 10)]
    public int fsparsity = 0;
    [Range(0, 10)]
    public int sfsize = 0;
    [Range(0, 10)]
    public int sfsparsity = 0;
    [Range(0, 10)]
    public int pamount = 0;
    [Range(0, 10)]
    public int psize = 0;
    [Range(0, 10)]
    public int psparsity = 0;
    [Range(0, 10)]
    public int spamount = 0;
    [Range(0, 10)]
    public int spsize = 0;
    [Range(0, 10)]
    public int spsparsity = 0;
    [Range(0, 10)]
    public int smoothmin = 0;
    [Range(0, 10)]
    public int smoothmax = 0;

    [Range(0, 100)]
    public int ramount = 0;
    [Range(0, 1000)]
    public int rsize = 0;
    [Range(0, 100)]
    public int rmin = 0;


  

    [Range(0, 10)]
    public int lamount = 0;
    [Range(0, 10)]
    public int lsize = 0;
    [Range(0, 10)]
    public int lsparsity = 0;
    [Range(0, 10)]
    public int slamount = 0;
    [Range(0, 10)]
    public int slsize = 0;
    [Range(0, 10)]
    public int slsparsity = 0;


    [Range(0, 10)]
    public int bamount = 0;
    [Range(0, 10)]
    public int bsize = 0;
    [Range(0, 10)]
    public int bsparsity = 0;
    [Range(0, 10)]
    public int sbamount = 0;
    [Range(0, 10)]
    public int sbsize = 0;
    [Range(0, 10)]
    public int sbsparsity = 0;



    [Range(0, 10)]
    public int cityamount = 0;
    [Range(0, 100)]
    public int townamount = 0;
    [Range(0, 100)]
    public int villageamount = 0;
    [Range(0, 100)]
    public int hamletamount = 0;


   static public int r = 1;
    static public int r2 = 1;

   


    [SerializeField] GameObject dirt, grass, stone, water, border, sand, highmountain, lowmountain, forest, plains, bad, Hamlet, Village, Town, City;
    // Start is called before the first frame update
    void Start()
    {
       
         int[,] test = make_noise_grid(25);
  
       apply_cellular_automaton2(test, count);
       

       add_mountains(test, mamount);
       add_smallmountains(test, mamount);
       add_forests(test, famount);
        expand_forests(test, famount);
        add_bad(test, bamount);
        expand_bad(test, bamount);
        add_plains(test, pamount);
        expand_plains(test, pamount);
        
 
        int[,] test2 = Expand(test, scale);



        smooth_land(test2);
         smooth_all(test2, smoothmin, smoothmax);
        smooth_all(test2, 1, 3);



        add_rivers(test2, rmin, ramount);
        add_rivers(test2, rmin, ramount);
        add_rivers(test2, rmin, ramount);


        add_forests(test2, famount);
        add_forests(test2, famount);
        add_forests(test2, famount);

        add_bad(test2, bamount);
        add_bad(test2, bamount);
        add_bad(test2, bamount);

        add_plains(test2, pamount);
        add_plains(test2, pamount);
         add_plains(test2, pamount);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);

        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);

        smooth_all(test2, smoothmin, smoothmax);
        smooth_all(test2, 1, 3);
        add_forests(test2, famount);
        add_forests(test2, famount);
        add_forests(test2, famount);


        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);



        add_lakes(test2, lamount);
        add_lakes(test2, lamount);
        add_lakes(test2, lamount);


        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);
        expand_bad(test2, sbamount);



        add_plains(test2, pamount);
        add_plains(test2, pamount);
        add_plains(test2, pamount);

        add_bad(test2, bamount);
        add_bad(test2, bamount);
        add_bad(test2, bamount);

        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);

        smooth_all(test2, smoothmin, smoothmax);
        smooth_all(test2, 1, 3);
        add_forests(test2, famount);
        add_forests(test2, famount);
        add_forests(test2, famount);
        add_plains(test2, pamount);
        add_plains(test2, pamount);
        add_plains(test2, pamount);

        add_bad(test2, bamount);
        add_bad(test2, bamount);
        add_bad(test2, bamount);

        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);

        smooth_all(test2, smoothmin, smoothmax);
        smooth_all(test2, 1, 3);
        add_forests(test2, famount);
        add_forests(test2, famount);
        add_forests(test2, famount);
        add_plains(test2, pamount);
        add_plains(test2, pamount);
        add_plains(test2, pamount);

        add_bad(test2, bamount);
        add_bad(test2, bamount);
        add_bad(test2, bamount);

        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);
        smooth_all(test2, 1, 3);

        // these can break, double check that it generates on the map only, not out of bounds
        //Fixed



        int[,] hamletgrid = make_location_grid(test2);
        string[,] hamletseeds = make_hamlet_grid(test2);

 

        add_hamlets(test2, hamletgrid, hamletamount,hamletseeds);
        build_hamlets(hamletseeds);
        Generate_hamlets(hamletgrid,hamletseeds);

        




        int[,] towngrid = make_location_grid(test2);
        string[,] townseeds = make_town_grid(test2);

        add_towns(test2, towngrid, townamount, townseeds);
        Generate_towns(towngrid);

        build_towns(townseeds);




        int[,] citygrid = make_location_grid(test2);
        string[,] cityseeds = make_city_grid(test2);

        add_citys(test2, citygrid, cityamount, cityseeds);
        Generate_citys(citygrid);

        build_citys(cityseeds);



        Generate_Map(test2);

     



        //Generation();


    }

  
    void Generate_hamlet_character(string[,] hamletseeds) 
    
    {
        //takes the array that has the buildings locations x/y are where each seed is found

        //other

        for (int x = 0; x < hamletseeds.GetLength(0); x++)
        {
            for (int y = 0; y < hamletseeds.GetLength(1); y++)
            {

                if (hamletseeds[x, y] != null)
                { 
                
                

                
                
                }



            }
        }


                int age  = UnityEngine.Random.Range(1, 80);
        int[,] origin = new int[hamletseeds.GetLength(0),hamletseeds.GetLength(1)];

        string eventhistory = "";
        string name = "Character";


        //then each year have a chance to do something based on location

        //Personality stats
        int bravery = 0;

        int altruism = 0;

        int ego = 0;

        int drive = 0;

        int morality = 0;

        int temperence = 0;

        int faith = 0;

        int social = 0;


        //Stats
        int strength = 0;
        int dexterity = 0;
        int constitution = 0;
        int intelligence = 0;
        int wisdom = 0;
        int charisma = 0;


        //then traits

        string[,] traits;

        for (int i = 0; i < age; i++) {
            int eventchance = UnityEngine.Random.Range(1, 2);

            //then do if yes then roll for agood or bad event ect, then check the array for applicable events so a bad event
            //could be to do with food scarcity ect
            //1 bad 2 neutral 3 good

            //make methods for the different types? 

            if (eventchance == 1) 
            {
                int type = UnityEngine.Random.Range(1, 3);


                if (type == 1)
                {
                    //bad events

                    int whichevent = UnityEngine.Random.Range(1, 3);

                    if (whichevent == 1)
                    {
                        //a bad event
                        // hungry! - harsh winter
                        //so if there is a scaricty in their settlement they could get weaker (to a limit)
                        //random chance for gluttony or temperence
                        //random chance for greed/aulturism
                        //random chance for faith
                        //chance for immoral
                        //make it based on existing stats

                        eventhistory = eventhistory + name + " suffered a harsh winter, the harvests and hunts were not plentiful. " +
                            "They survived ";

                        if (constitution >= 14) {

                            eventhistory = eventhistory + "because of their hardy constitution.";






                        }







                    }
                    if (whichevent == 2)
                    {
                        //a bad event




                    }
                    if (whichevent == 3)
                    {
                        //a bad event



                    }



                }

                if (type == 1) 
                {

                    int whichevent = UnityEngine.Random.Range(1, 3);
                    //neutral
                }

                if (type == 1) 
                {

                    //good events

                    int whichevent = UnityEngine.Random.Range(1, 3);
                }

            }
          




        }



//bravery vs cowardness

        //charity vs greed

        //humble vs proud

        //lazyness vs driven

        //immoral vs moral

        //gluttony vs temperence

        //faithful vs athiest

        //introverted vs extrovert




    }

    void Generate_Map(int[,] noise_grid)
    {

        // 1 = water
        // 2 = land
        // 3 = high mountain 
        // 4 = lower mountain
        //5 = Sand
        //6 = Forest
        //7 Plains
        //8 Bad

        for (int x = 0; x < noise_grid.GetLength(0); x++)
        {
            for (int y = 0; y < noise_grid.GetLength(1); y++)
            {

                if (noise_grid[x, y] == 2) {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;

                  

                    string[,] temp_grid3 = new string[2, 2];

                  

                    spawnObj(grass, x, y,temp_grid2, temp_grid3);


                }
               if (noise_grid[x, y] == 1)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(water, x, y, temp_grid2, temp_grid3);


                }

                if (noise_grid[x, y] == 3) {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(highmountain, x, y, temp_grid2, temp_grid3);

                }
                if (noise_grid[x, y] == 4)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(lowmountain, x, y, temp_grid2, temp_grid3);

                }

                if (noise_grid[x, y] == 5)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(sand, x, y, temp_grid2, temp_grid3);

                }

                if (noise_grid[x, y] == 6)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(forest, x, y, temp_grid2, temp_grid3);

                }

                if (noise_grid[x, y] == 7)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(plains, x, y, temp_grid2, temp_grid3);

                }
                if (noise_grid[x, y] == 8)
                {

                    int[,] temp_grid2 = new int[2, 2];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[2, 2];
                    spawnObj(bad, x, y, temp_grid2, temp_grid3);

                }
            }
        }
    }

    void Generate_hamlets(int[,] noise_grid, string[,] hamletseeds)
    {

        for (int x = 0; x < noise_grid.GetLength(0); x++)
        {
            for (int y = 0; y < noise_grid.GetLength(1); y++)
            {
  
                if (noise_grid[x, y] >= 1)
                {
                    int[,] temp_grid2 = new int[2, 2];
                 
                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;
                   
                    string[,] temp_grid3 = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];

                    temp_grid3[1, 1] = hamletseeds[x,y];
                  //  Debug.Log(temp_grid3[1, 1]);

                    spawnObj2(Hamlet, x, y, temp_grid2, temp_grid3);
                    // int[,] temp_grid = new int[hamletseeds.GetLength(0), hamletseeds.GetLength(1)];
                    //store the length of arrays somewhere else outside the generation
                    // int[,] exporthamletcords2 = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];
                  //  r = noise_grid.GetLength(0);
                  //  r2 = noise_grid.GetLength(1);
                  //  exporthamletcords[1, 0] = x;
                  //  exporthamletcords[0, 1] = y;
                  //  exporthamletseeds[x, y] = hamletseeds[x, y];

                    //make amethod that exports them?
                   
                    //  exporthamletcords[;
                    // also attach its cords here somehow?
                }
              
            }
        }
    }

    void Generate_towns(int[,] noise_grid)
    {


        for (int x = 0; x < noise_grid.GetLength(0); x++)
        {
            for (int y = 0; y < noise_grid.GetLength(1); y++)
            {


                if (noise_grid[x, y] >= 1)
                {
                    int[,] temp_grid2 = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];
                    spawnObj(Town, x, y, temp_grid2, temp_grid3);



                }



            }
        }
    }

    void Generate_citys(int[,] noise_grid)
    {


        for (int x = 0; x < noise_grid.GetLength(0); x++)
        {
            for (int y = 0; y < noise_grid.GetLength(1); y++)
            {


                if (noise_grid[x, y] >= 1)
                {
                    int[,] temp_grid2 = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

                    temp_grid2[1, 0] = x;
                    temp_grid2[0, 1] = y;



                    string[,] temp_grid3 = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];
                    spawnObj(City, x, y, temp_grid2, temp_grid3);



                }



            }
        }
    }

    string[,] build_hamlets(string[,] hamletseeds)
    {

        // hamletseed is grid of all the hamlets with the completed seeds at each
        // so find them then generate from them, then return the seeds for the completed generations? in an array maybe?



        // search array first, this should all be localised, then overwrite the seed at the array at the end then return array at the end end


        //make things like population, 1-4, 1 low 2 average ect
        //then same for prosperity
        //and different goods?

       
        //doing the same ones more than once? 
        int[,] temp_grid = new int[hamletseeds.GetLength(0), hamletseeds.GetLength(1)];


        for (int x = 0; x < hamletamount; x++)
        {
                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {


                    if (hamletseeds[i, y] != null)
                    {
                       // Debug.Log("Hamlet seed: " + hamletseeds[i, y]);



                        string newseed = "";

                        int pop = 0;
                        //population = half food + prosperity + goods?

                        int prosperity = 0;
                        int food = 0;
                        // do population - food at the end
                        int goods = 0;

                        //1
                        int water = 0;
                        //2
                        int farmland = 0;
                        //3
                        int mountains = 0;
                        //4                
                        int forest = 0;


                        
                     
               

                        int length = hamletseeds[i, y].Length;
                        for (int j = 0; j < length; j++)
                        {
                            char c = hamletseeds[i,y][j];

                            if (c == '1') {

                                water++;


                            }
                            if (c == '2')
                            {
                                farmland++;


                            }
                            if (c == '3')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                mountains = mountains + ran;
                      


                            }
                            if (c == '4')
                            {

                                mountains++;


                            }                     
                            if (c == '6')
                            {

                                forest++;


                            }
                            if (c == '7')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                farmland = farmland + ran;
                              


                            }
                            if (c == '8')
                            {
                                int ran = UnityEngine.Random.Range(-6, -1);
                               
                                farmland = farmland + ran;


                            }




                        ////    Debug.Log(x + " Water = " + water);
                          //  Debug.Log(x + " Farmland = " + farmland);
                          //  Debug.Log(x + " Mountains = " + mountains);
                          //  Debug.Log(x + " Forests = " + forest);


                        }


                        int rana = UnityEngine.Random.Range(1, 50);
                        for (int p = 0; p < rana; p++) {

                            if (farmland! < 3 || mountains! < 3 || water! < 1 || forest! < 1)
                            {

                                
                                // it was 83
                                // they can go into negatives
                                int rann = UnityEngine.Random.Range(1, 4);

                                if (rann == 1 && farmland !<= 3)
                                {


                                 
                                    int ran = UnityEngine.Random.Range(1, 4);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1 && farmland! < 3)
                                        {
                                            newseed = newseed + "foodfarm1";
                                            farmland = farmland - 3;
                                            food = food + 10;

                                        }


                                        if (ran == 2 && farmland! < 6)
                                        {
                                            newseed = newseed + "foodfarm2";
                                            farmland = farmland - 6;
                                            food = food + 22;
                                        }
                                        if (ran == 3 && farmland! < 12)
                                        {
                                            newseed = newseed + "foodfarm3";
                                            farmland = farmland - 12;
                                            food = food + 34;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1 && farmland! < 3)
                                        {

                                            newseed = newseed + "animalfarm1";
                                            farmland = farmland - 3;
                                            food = food + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2 && farmland! < 6)
                                        {
                                            newseed = newseed + "animalfarm2";
                                            farmland = farmland - 6;
                                            food = food + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && farmland! < 12)
                                        {
                                            newseed = newseed + "animalfarm3";
                                            farmland = farmland - 12;

                                            food = food + 24;
                                            goods = goods + 24;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1 && farmland! < 6)
                                        {

                                            newseed = newseed + "luxuryfarm1";
                                            farmland = farmland - 6;
                                            food = food + 5;
                                            goods = goods + 10;
                                            prosperity = prosperity + 10;
                                        }
                                        if (ran == 2 && farmland! < 12)
                                        {
                                            newseed = newseed + "luxuryfarm2";
                                            farmland = farmland - 12;
                                            food = food + 12;
                                            goods = goods + 22;
                                            prosperity = prosperity + 22;
                                        }
                                        if (ran == 3 && farmland! < 24)
                                        {
                                            newseed = newseed + "luxuryfarm3";
                                            farmland = farmland - 24;

                                            food = food + 24;
                                            goods = goods + 34;
                                            prosperity = prosperity + 34;
                                        }


                                    }


                                    if (ran == 4 && farmland! < 3 && forest! < 3)
                                    {
                                        newseed = newseed + "apothecary";
                                        farmland = farmland - 3;
                                        forest = forest - 3;
                                        goods = goods + 15;
                                        prosperity = prosperity + 5;


                                    }


                                }

                                if (rann == 2 && mountains! < 3)
                                {


                                    //generalmines
                                    //goldmine
                                    // coal mine
                                    // iron mine
                                    // silver mine

                                    int ran = UnityEngine.Random.Range(1, 5);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1 && mountains! < 3)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "generalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2 && mountains! < 6)
                                        {
                                            newseed = newseed + "generalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && mountains! < 12)
                                        {
                                            newseed = newseed + "generalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 2)
                                    {

                                        if (ran2 == 1 && mountains! < 6)
                                        {
                                            newseed = newseed + "goldmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2 && mountains! < 12)
                                        {
                                            newseed = newseed + "goldmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && mountains! < 24)
                                        {
                                            newseed = newseed + "goldmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 3)
                                    {

                                        if (ran2 == 1 && mountains! < 3)
                                        {
                                            newseed = newseed + "coalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2 && mountains! < 6)
                                        {
                                            newseed = newseed + "coalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3 && mountains! < 12)
                                        {
                                            newseed = newseed + "coalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 4)
                                    {

                                        if (ran2 == 1 && mountains! < 6)
                                        {
                                            newseed = newseed + "ironmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 10;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2 && mountains! < 12)
                                        {
                                            newseed = newseed + "ironmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 22;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3 && mountains! < 24)
                                        {
                                            newseed = newseed + "ironmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 34;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 5)
                                    {

                                        if (ran2 == 1 && mountains! < 6)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2 && mountains! < 12)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && mountains! < 24)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                }

                                // forest then water

                                if (rann == 3 && forest! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 3);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1 && forest! < 1)
                                        {
                                            newseed = newseed + "charcoalburner1";
                                            forest = forest - 1;
                                            goods = goods + 5;

                                        }


                                        if (ran == 2 && forest! < 2)
                                        {
                                            newseed = newseed + "charcoalburner2";
                                            forest = forest - 2;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && forest! < 3)
                                        {
                                            newseed = newseed + "charcoalburner3";
                                            forest = forest - 3;
                                            goods = goods + 19;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1 && forest! < 1)
                                        {

                                            newseed = newseed + "lumbermill1";
                                            forest = forest - 1;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2 && forest! < 2)
                                        {
                                            newseed = newseed + "lumbermill2";
                                            forest = forest - 2;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3 && forest! < 3)
                                        {
                                            newseed = newseed + "lumbermill3";
                                            forest = forest - 3;

                                            prosperity = prosperity + 19;
                                            prosperity = prosperity + 19;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1 && forest! < 3)
                                        {

                                            newseed = newseed + "huntersguild1";
                                            forest = forest - 3;
                                            food = food + 10;
                                            goods = goods + 10;

                                        }
                                        if (ran == 2 && forest! < 6)
                                        {
                                            newseed = newseed + "huntersguild2";
                                            forest = forest - 6;
                                            food = food + 22;
                                            goods = goods + 22;

                                        }
                                        if (ran == 3 && forest! < 12)
                                        {
                                            newseed = newseed + "huntersguild3";
                                            forest = forest - 12;

                                            food = food + 34;
                                            goods = goods + 34;

                                        }


                                    }





                                }

                                if (rann == 4 && water! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 2);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1 && water! < 1)
                                    {

                                        if (ran2 == 1 && water! < 1)
                                        {
                                            newseed = newseed + "fishingdock1";
                                            water = water - 1;
                                            food = food + 10;

                                        }


                                        if (ran == 2 && water! < 2)
                                        {
                                            newseed = newseed + "fishingdock2";
                                            water = water - 2;
                                            food = food + 22;
                                        }
                                        if (ran == 3 && water! < 3)
                                        {
                                            newseed = newseed + "fishingdock3";
                                            water = water - 3;
                                            food = food + 34;
                                        }


                                    }








                                }

                            }
                        }
                        pop = food +  UnityEngine.Random.Range(30,120);

                        //   for (int q = 0; q < 50; q++)
                        // {


                        //  }
    
                        int tempfood = food;
                        int tempgoods = goods;
                        int tempprosperity = prosperity;
                        //  Debug.Log("AWE");
                        int ranq = UnityEngine.Random.Range(1, 50);
                        for (int v = 0; v < ranq; v++)
                        {
                           
                           

                           // if (tempfood! < 0 || tempgoods! < 0 || tempprosperity! < 0)
                           // {
                               
                                // it was 83
                                // they can go into negatives
                                int rann = UnityEngine.Random.Range(1, 8);

                            
                            //temple
                            if (rann == 1 && tempprosperity! < 100)
                                {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 100 && tempgoods <= 200 && ran ==1)
                                    {
                                   
                                    newseed = newseed + "temple1";
                                        tempgoods = tempgoods - 100;
                                    tempprosperity = tempprosperity - 100;
                                }


                                    if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                    {
                                   
                                    newseed = newseed + "temple2";
                                        tempgoods = tempgoods - 200;
                                    tempprosperity = tempprosperity - 100;
                                }


                                    if (tempgoods >= 300 && ran == 3)
                                    {
                                  
                                    newseed = newseed + "temple3";
                                        tempgoods = tempgoods - 300;
                                    tempprosperity = tempprosperity - 100;
                                }

                                

                            }

                                // tavern

                                if (rann == 2 && tempprosperity! < 20)
                                {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran ==1)
                                    {
                                        newseed = newseed + "tavern1";
                                        tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;
                                    }


                                    if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                    {
                                        newseed = newseed + "tavern2";
                                        tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                    }

                                    if (tempgoods >= 60 && ran == 3)
                                    {
                                        newseed = newseed + "tavern3";
                                        tempgoods = tempgoods - 60;

                                    tempprosperity = tempprosperity - 20;
                                }



                            }

                            // library

                            // if (rann == 3 && tempprosperity ! < 100)
                            if (rann == 3 )
                                {

                              

                                int ran = UnityEngine.Random.Range(1, 3);

                             

                                if (tempprosperity >= 100 && tempprosperity <= 200 && ran ==1)
                                    {

                                    
                                    newseed = newseed + "library1";
                                        tempprosperity = tempprosperity - 100;
                                    tempprosperity = tempprosperity - 100;

                                }


                                    if (tempprosperity >= 200 && tempprosperity <= 300 && ran == 2)
                                    {
                                        newseed = newseed + "library2";
                                        tempprosperity = tempprosperity - 200;
                                    tempprosperity = tempprosperity - 100;
                                }

                                    if (tempprosperity >= 300 && ran == 3)
                                    {
                                        newseed = newseed + "library3";
                                        tempprosperity = tempprosperity - 300;

                                    tempprosperity = tempprosperity - 100;
                                }


                            }

                            // walls
                            // if (rann == 4 && tempgoods! < 200)
                            if (rann == 4)
                                {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 200 && tempgoods <= 400 && ran ==1)
                                    {
                                        newseed = newseed + "walls1";
                                        tempgoods = tempgoods - 200;

                                    }


                                    if (tempgoods >= 400 && tempgoods <= 600 && ran == 2)
                                    {
                                        newseed = newseed + "walls2";
                                        tempgoods = tempgoods - 400;
                                    }

                                    if (tempgoods >= 600 && ran == 3)
                                    {
                                        newseed = newseed + "walls3";
                                        tempgoods = tempgoods - 600;

                                    }



                                }

                                // market

                                if (rann == 5 && tempgoods! < 100)
                                {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 10 && tempgoods <= 200 && ran ==1)
                                    {
                                        newseed = newseed + "market1";
                                        tempgoods = tempgoods - 100;
                                    tempgoods = tempgoods - 100;
                                }


                                    if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                    {
                                        newseed = newseed + "market2";
                                        tempgoods = tempgoods - 200;
                                    tempgoods = tempgoods - 100;
                                }

                                    if (tempgoods >= 300 && ran == 3)
                                    {
                                        newseed = newseed + "market3";
                                        tempgoods = tempgoods - 300;
                                    tempgoods = tempgoods - 100;

                                }
                               


                            }

                                // shop

                                if (rann == 6 && tempprosperity! < 20)
                                {



                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran ==1)
                                    {
                                        newseed = newseed + "shop1";
                                        tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;

                                }


                                    if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                    {
                                        newseed = newseed + "shop2";
                                        tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                }

                                    if (tempgoods >= 60 && ran == 3)
                                    {
                                        newseed = newseed + "shop3";
                                        tempgoods = tempgoods - 60;
                                    tempprosperity = tempprosperity - 20;

                                }
                               


                            }

                            //barracks
                            // if (rann == 7 && tempfood! < 100)
                            if (rann == 7 )
                                {

                                int ran = UnityEngine.Random.Range(1, 3);
                             
                                if (tempgoods >= 100 && tempgoods <= 200 && ran ==1)
                                    {
                                        newseed = newseed + "barracks1";
                                        tempgoods = tempgoods - 100;
                                    tempfood = tempfood - 100;
                                }


                                    if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                    {
                                        newseed = newseed + "barracks2";
                                        tempgoods = tempgoods - 200;
                                    tempfood = tempfood - 100;
                                }

                                    if (tempgoods >= 300 && ran == 3)
                                    {
                                        newseed = newseed + "barracks3";
                                        tempgoods = tempgoods - 300;
                                    tempfood = tempfood - 100;

                                }

                             

                            }

                          //  }
                        }

                        //now take the values and make it stuff
                        if (food >= 301) {
                            newseed = newseed + "foodabundance";

                        }
                        if (food >= 200  && food <= 300)
                        {
                            newseed = newseed + "foodplenty";

                        }

                        if (food >= 100 && food <= 199)
                        {
                            newseed = newseed + "foodsurplus";

                        }

                        if (food <= 100)
                        {
                            newseed = newseed + "foodscarce";

                        }

                        //over 300 food an abundance
                        //200 plenty
                        //over 100 surplus
                        //0 scarse 


                        if (prosperity >= 601)
                        {
                            newseed = newseed + "prosperityrich";

                        }
                        if (prosperity >= 400 && prosperity <= 600)
                        {
                            newseed = newseed + "prosperityplenty";

                        }

                        if (prosperity >= 300 && prosperity <= 399)
                        {
                            newseed = newseed + "prosperityaverage";

                        }

                        if (prosperity >= 200 && prosperity <= 299)
                        {
                            newseed = newseed + "prosperitypoor";

                        }

                        if (prosperity <= 100)
                        {
                            newseed = newseed + "prosperitydesolate";

                        }

                        // over 600 is rich
                        // over 400 plenty
                        // over 300 average
                        //under 200 needy
                        // under 100 desolate 


                        if (goods >= 601)
                        {
                            newseed = newseed + "goodsabundance";

                        }
                        if (goods >= 400 && goods <= 600)
                        {
                            newseed = newseed + "goodsplenty";

                        }

                        if (goods >= 300 && goods <= 399)
                        {
                            newseed = newseed + "goodsaverage";

                        }

                        if (goods >= 200 && goods <= 299)
                        {
                            newseed = newseed + "goodsneedy";

                        }

                        if (goods <= 100)
                        {
                            newseed = newseed + "goodsdesolate";

                        }
                        // over 600 goods an abundance

                        // over 400 plenty
                        // over 300 average
                        //under 200 needy

                        // under 100 desolate 


                        if (pop >= 301)
                        {
                            newseed = newseed + "veryhighpop";

                        }
                        if (pop >= 200 && pop <= 300)
                        {
                            newseed = newseed + "highpop";

                        }

                        if (pop >= 100 && pop <= 199)
                        {
                            newseed = newseed + "averagepop";

                        }

                        if (pop >= 51 && pop <= 99)
                        {
                            newseed = newseed + "quiet";

                        }

                        if (pop <= 50)
                        {
                            newseed = newseed + "veryquiet";

                        }

                        // over 300 people very high population
                        //over 200 high
                        //over 100 average
                        //under 100 quiet
                        //under 50 very quiet
                        // Debug.Log(newseed);
                        //   Debug.Log(" food: " + food);
                        //  Debug.Log(" goods: " + goods);
                        //   Debug.Log(" prosperity: " + prosperity);
                        // Debug.Log(" Pop:" + pop);

                       // Debug.Log (hamletseeds[i, y]);
                        hamletseeds[i, y] = newseed;
                    
                    }



                }

                }

            }
        return hamletseeds;
        }

    string[,] build_towns(string[,] hamletseeds)
    {

        // hamletseed is grid of all the hamlets with the completed seeds at each
        // so find them then generate from them, then return the seeds for the completed generations? in an array maybe?



        // search array first, this should all be localised, then overwrite the seed at the array at the end then return array at the end end


        //make things like population, 1-4, 1 low 2 average ect
        //then same for prosperity
        //and different goods?



        int[,] temp_grid = new int[hamletseeds.GetLength(0), hamletseeds.GetLength(1)];


        for (int x = 0; x < townamount; x++)
        {
            for (int i = 0; i < temp_grid.GetLength(0); i++)
            {

                for (int y = 0; y < temp_grid.GetLength(1); y++)
                {


                    if (hamletseeds[i, y] != null)
                    {

                        string newseed = "";

                        int pop = 0;
                        //population = half food + prosperity + goods?

                        int prosperity = 0;
                        int food = 0;
                        // do population - food at the end
                        int goods = 0;

                        //1
                        int water = 0;
                        //2
                        int farmland = 0;
                        //3
                        int mountains = 0;
                        //4                
                        int forest = 0;






                        int length = hamletseeds[i, y].Length;
                        for (int j = 0; j < length; j++)
                        {
                            char c = hamletseeds[i, y][j];

                            if (c == '1')
                            {

                                water++;


                            }
                            if (c == '2')
                            {
                                farmland++;


                            }
                            if (c == '3')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                mountains = mountains + ran;



                            }
                            if (c == '4')
                            {

                                mountains++;


                            }
                            if (c == '6')
                            {

                                forest++;


                            }
                            if (c == '7')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                farmland = farmland + ran;



                            }
                            if (c == '8')
                            {
                                int ran = UnityEngine.Random.Range(-6, -1);

                                farmland = farmland + ran;


                            }




                            ////    Debug.Log(x + " Water = " + water);
                            //  Debug.Log(x + " Farmland = " + farmland);
                            //  Debug.Log(x + " Mountains = " + mountains);
                            //  Debug.Log(x + " Forests = " + forest);


                        }



                        for (int p = 0; p < 50; p++)
                        {

                            if (farmland! < 3 || mountains! < 3 || water! < 1 || forest! < 1)
                            {

                                // it was 83
                                // they can go into negatives
                                int rann = UnityEngine.Random.Range(1, 4);

                                if (rann == 1 && farmland! < 3)
                                {



                                    int ran = UnityEngine.Random.Range(1, 4);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "foodfarm1";
                                            farmland = farmland - 3;
                                            food = food + 10;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "foodfarm2";
                                            farmland = farmland - 6;
                                            food = food + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "foodfarm3";
                                            farmland = farmland - 12;
                                            food = food + 34;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "animalfarm1";
                                            farmland = farmland - 3;
                                            food = food + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "animalfarm2";
                                            farmland = farmland - 6;
                                            food = food + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "animalfarm3";
                                            farmland = farmland - 12;

                                            food = food + 24;
                                            goods = goods + 24;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "luxuryfarm1";
                                            farmland = farmland - 6;
                                            food = food + 5;
                                            goods = goods + 10;
                                            prosperity = prosperity + 10;
                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "luxuryfarm2";
                                            farmland = farmland - 12;
                                            food = food + 12;
                                            goods = goods + 22;
                                            prosperity = prosperity + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "luxuryfarm3";
                                            farmland = farmland - 24;

                                            food = food + 24;
                                            goods = goods + 34;
                                            prosperity = prosperity + 34;
                                        }


                                    }


                                    if (ran == 4 && forest! < 3)
                                    {
                                        newseed = newseed + "apothecary";
                                        farmland = farmland - 3;
                                        forest = forest - 3;
                                        goods = goods + 15;
                                        prosperity = prosperity + 5;


                                    }


                                }

                                if (rann == 2 && mountains! < 3)
                                {


                                    //generalmines
                                    //goldmine
                                    // coal mine
                                    // iron mine
                                    // silver mine

                                    int ran = UnityEngine.Random.Range(1, 5);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "generalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "generalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "generalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "goldmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "goldmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "goldmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "coalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "coalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "coalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 4)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "ironmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 10;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "ironmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 22;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "ironmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 34;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 5)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                }

                                // forest then water

                                if (rann == 3 && forest! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 3);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "charcoalburner1";
                                            forest = forest - 1;
                                            goods = goods + 5;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "charcoalburner2";
                                            forest = forest - 2;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "charcoalburner3";
                                            forest = forest - 3;
                                            goods = goods + 19;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "lumbermill1";
                                            forest = forest - 1;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "lumbermill2";
                                            farmland = farmland - 2;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "lumbermill3";
                                            farmland = farmland - 12;

                                            prosperity = prosperity + 19;
                                            prosperity = prosperity + 19;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "huntersguild1";
                                            forest = forest - 3;
                                            food = food + 10;
                                            goods = goods + 10;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "huntersguild2";
                                            farmland = farmland - 6;
                                            food = food + 22;
                                            goods = goods + 22;

                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "huntersguild3";
                                            forest = forest - 12;

                                            food = food + 34;
                                            goods = goods + 34;

                                        }


                                    }





                                }

                                if (rann == 4 && water! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 2);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "fishingdock1";
                                            water = water - 1;
                                            food = food + 10;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "fishingdock2";
                                            water = water - 2;
                                            food = food + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "fishingdock3";
                                            water = water - 3;
                                            food = food + 34;
                                        }


                                    }








                                }

                            }
                        }
                        pop = food + UnityEngine.Random.Range(30, 120);

                        //   for (int q = 0; q < 50; q++)
                        // {


                        //  }

                        int tempfood = food;
                        int tempgoods = goods;
                        int tempprosperity = prosperity;
                        //  Debug.Log("AWE");
                        for (int v = 0; v < 50; v++)
                        {



                            // if (tempfood! < 0 || tempgoods! < 0 || tempprosperity! < 0)
                            // {

                            // it was 83
                            // they can go into negatives
                            int rann = UnityEngine.Random.Range(1, 8);


                            //temple
                            if (rann == 1 && tempprosperity! < 100)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 100 && tempgoods <= 200 && ran == 1)
                                {

                                    newseed = newseed + "temple1";
                                    tempgoods = tempgoods - 100;
                                    tempprosperity = tempprosperity - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {

                                    newseed = newseed + "temple2";
                                    tempgoods = tempgoods - 200;
                                    tempprosperity = tempprosperity - 100;
                                }


                                if (tempgoods >= 300 && ran == 3)
                                {

                                    newseed = newseed + "temple3";
                                    tempgoods = tempgoods - 300;
                                    tempprosperity = tempprosperity - 100;
                                }



                            }

                            // tavern

                            if (rann == 2 && tempprosperity! < 20)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran == 1)
                                {
                                    newseed = newseed + "tavern1";
                                    tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;
                                }


                                if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                {
                                    newseed = newseed + "tavern2";
                                    tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                }

                                if (tempgoods >= 60 && ran == 3)
                                {
                                    newseed = newseed + "tavern3";
                                    tempgoods = tempgoods - 60;

                                    tempprosperity = tempprosperity - 20;
                                }



                            }

                            // library
                            //  if (rann == 3 && tempprosperity! < 100)
                            if (rann == 3 )
                            {

                            

                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempprosperity >= 100 && tempprosperity <= 200 && ran == 1)
                                {


                                    newseed = newseed + "library1";
                                    tempprosperity = tempprosperity - 100;
                                    tempprosperity = tempprosperity - 100;

                                }


                                if (tempprosperity >= 200 && tempprosperity <= 300 && ran == 2)
                                {
                                    newseed = newseed + "library2";
                                    tempprosperity = tempprosperity - 200;
                                    tempprosperity = tempprosperity - 100;
                                }

                                if (tempprosperity >= 300 && ran == 3)
                                {
                                    newseed = newseed + "library3";
                                    tempprosperity = tempprosperity - 300;

                                    tempprosperity = tempprosperity - 100;
                                }


                            }

                            // walls

                            //if (rann == 4 && tempgoods! < 200)
                            if (rann == 4 )
                            {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 200 && tempgoods <= 400 && ran == 1)
                                {
                                    newseed = newseed + "walls1";
                                    tempgoods = tempgoods - 200;

                                }


                                if (tempgoods >= 400 && tempgoods <= 600 && ran == 2)
                                {
                                    newseed = newseed + "walls2";
                                    tempgoods = tempgoods - 400;
                                }

                                if (tempgoods >= 600 && ran == 3)
                                {
                                    newseed = newseed + "walls3";
                                    tempgoods = tempgoods - 600;

                                }



                            }

                            // market

                            if (rann == 5 && tempgoods! < 100)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 10 && tempgoods <= 200 && ran == 1)
                                {
                                    newseed = newseed + "market1";
                                    tempgoods = tempgoods - 100;
                                    tempgoods = tempgoods - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {
                                    newseed = newseed + "market2";
                                    tempgoods = tempgoods - 200;
                                    tempgoods = tempgoods - 100;
                                }

                                if (tempgoods >= 300 && ran == 3)
                                {
                                    newseed = newseed + "market3";
                                    tempgoods = tempgoods - 300;
                                    tempgoods = tempgoods - 100;

                                }



                            }

                            // shop

                            if (rann == 6 && tempprosperity! < 20)
                            {



                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran == 1)
                                {
                                    newseed = newseed + "shop1";
                                    tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;

                                }


                                if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                {
                                    newseed = newseed + "shop2";
                                    tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                }

                                if (tempgoods >= 60 && ran == 3)
                                {
                                    newseed = newseed + "shop3";
                                    tempgoods = tempgoods - 60;
                                    tempprosperity = tempprosperity - 20;

                                }



                            }

                            //barracks

                            // if (rann == 7 && tempfood! < 100)
                            if (rann == 7 )
                            {

                                int ran = UnityEngine.Random.Range(1, 3);
                            
                                if (tempgoods >= 100 && tempgoods <= 200 && ran == 1)
                                {
                                    newseed = newseed + "barracks1";
                                    tempgoods = tempgoods - 100;
                                    tempfood = tempfood - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {
                                    newseed = newseed + "barracks2";
                                    tempgoods = tempgoods - 200;
                                    tempfood = tempfood - 100;
                                }

                                if (tempgoods >= 300 && ran == 3)
                                {
                                    newseed = newseed + "barracks3";
                                    tempgoods = tempgoods - 300;
                                    tempfood = tempfood - 100;

                                }



                            }

                            //  }
                        }

                        //now take the values and make it stuff
                        if (food >= 301)
                        {
                            newseed = newseed + "foodabundance";

                        }
                        if (food >= 200 && food <= 300)
                        {
                            newseed = newseed + "foodplenty";

                        }

                        if (food >= 100 && food <= 199)
                        {
                            newseed = newseed + "foodsurplus";

                        }

                        if (food <= 100)
                        {
                            newseed = newseed + "foodscarce";

                        }

                        //over 300 food an abundance
                        //200 plenty
                        //over 100 surplus
                        //0 scarse 


                        if (prosperity >= 601)
                        {
                            newseed = newseed + "prosperityrich";

                        }
                        if (prosperity >= 400 && prosperity <= 600)
                        {
                            newseed = newseed + "prosperityplenty";

                        }

                        if (prosperity >= 300 && prosperity <= 399)
                        {
                            newseed = newseed + "prosperityaverage";

                        }

                        if (prosperity >= 200 && prosperity <= 299)
                        {
                            newseed = newseed + "prosperitypoor";

                        }

                        if (prosperity <= 100)
                        {
                            newseed = newseed + "prosperitydesolate";

                        }

                        // over 600 is rich
                        // over 400 plenty
                        // over 300 average
                        //under 200 needy
                        // under 100 desolate 


                        if (goods >= 601)
                        {
                            newseed = newseed + "goodsabundance";

                        }
                        if (goods >= 400 && goods <= 600)
                        {
                            newseed = newseed + "goodsplenty";

                        }

                        if (goods >= 300 && goods <= 399)
                        {
                            newseed = newseed + "goodsaverage";

                        }

                        if (goods >= 200 && goods <= 299)
                        {
                            newseed = newseed + "goodsneedy";

                        }

                        if (goods <= 100)
                        {
                            newseed = newseed + "goodsdesolate";

                        }
                        // over 600 goods an abundance

                        // over 400 plenty
                        // over 300 average
                        //under 200 needy

                        // under 100 desolate 


                        if (pop >= 301)
                        {
                            newseed = newseed + "veryhighpop";

                        }
                        if (pop >= 200 && pop <= 300)
                        {
                            newseed = newseed + "highpop";

                        }

                        if (pop >= 100 && pop <= 199)
                        {
                            newseed = newseed + "averagepop";

                        }

                        if (pop >= 51 && pop <= 99)
                        {
                            newseed = newseed + "quiet";

                        }

                        if (pop <= 50)
                        {
                            newseed = newseed + "veryquiet";

                        }

                        // over 300 people very high population
                        //over 200 high
                        //over 100 average
                        //under 100 quiet
                        //under 50 very quiet
                      
                     //  Debug.Log(newseed);
                        //   Debug.Log(" food: " + food);
                        //  Debug.Log(" goods: " + goods);
                        //   Debug.Log(" prosperity: " + prosperity);
                        // Debug.Log(" Pop:" + pop);


                        hamletseeds[i, y] = newseed;

                    }



                }

            }

        }
        return hamletseeds;
    }

    string[,] build_citys(string[,] hamletseeds)
    {

        // hamletseed is grid of all the hamlets with the completed seeds at each
        // so find them then generate from them, then return the seeds for the completed generations? in an array maybe?



        // search array first, this should all be localised, then overwrite the seed at the array at the end then return array at the end end


        //make things like population, 1-4, 1 low 2 average ect
        //then same for prosperity
        //and different goods?



        int[,] temp_grid = new int[hamletseeds.GetLength(0), hamletseeds.GetLength(1)];


        for (int x = 0; x < cityamount; x++)
        {
            for (int i = 0; i < temp_grid.GetLength(0); i++)
            {

                for (int y = 0; y < temp_grid.GetLength(1); y++)
                {


                    if (hamletseeds[i, y] != null)
                    {

                        string newseed = "";

                        int pop = 0;
                        //population = half food + prosperity + goods?

                        int prosperity = 0;
                        int food = 0;
                        // do population - food at the end
                        int goods = 0;

                        //1
                        int water = 0;
                        //2
                        int farmland = 0;
                        //3
                        int mountains = 0;
                        //4                
                        int forest = 0;






                        int length = hamletseeds[i, y].Length;
                        for (int j = 0; j < length; j++)
                        {
                            char c = hamletseeds[i, y][j];

                            if (c == '1')
                            {

                                water++;


                            }
                            if (c == '2')
                            {
                                farmland++;


                            }
                            if (c == '3')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                mountains = mountains + ran;



                            }
                            if (c == '4')
                            {

                                mountains++;


                            }
                            if (c == '6')
                            {

                                forest++;


                            }
                            if (c == '7')
                            {
                                int ran = UnityEngine.Random.Range(1, 6);
                                farmland = farmland + ran;



                            }
                            if (c == '8')
                            {
                                int ran = UnityEngine.Random.Range(-6, -1);

                                farmland = farmland + ran;


                            }




                            ////    Debug.Log(x + " Water = " + water);
                            //  Debug.Log(x + " Farmland = " + farmland);
                            //  Debug.Log(x + " Mountains = " + mountains);
                            //  Debug.Log(x + " Forests = " + forest);


                        }



                        for (int p = 0; p < 50; p++)
                        {

                            if (farmland! < 3 || mountains! < 3 || water! < 1 || forest! < 1)
                            {

                                // it was 83
                                // they can go into negatives
                                int rann = UnityEngine.Random.Range(1, 4);

                                if (rann == 1 && farmland! < 3)
                                {



                                    int ran = UnityEngine.Random.Range(1, 4);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "foodfarm1";
                                            farmland = farmland - 3;
                                            food = food + 10;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "foodfarm2";
                                            farmland = farmland - 6;
                                            food = food + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "foodfarm3";
                                            farmland = farmland - 12;
                                            food = food + 34;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "animalfarm1";
                                            farmland = farmland - 3;
                                            food = food + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "animalfarm2";
                                            farmland = farmland - 6;
                                            food = food + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "animalfarm3";
                                            farmland = farmland - 12;

                                            food = food + 24;
                                            goods = goods + 24;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "luxuryfarm1";
                                            farmland = farmland - 6;
                                            food = food + 5;
                                            goods = goods + 10;
                                            prosperity = prosperity + 10;
                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "luxuryfarm2";
                                            farmland = farmland - 12;
                                            food = food + 12;
                                            goods = goods + 22;
                                            prosperity = prosperity + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "luxuryfarm3";
                                            farmland = farmland - 24;

                                            food = food + 24;
                                            goods = goods + 34;
                                            prosperity = prosperity + 34;
                                        }


                                    }


                                    if (ran == 4 && forest! < 3)
                                    {
                                        newseed = newseed + "apothecary";
                                        farmland = farmland - 3;
                                        forest = forest - 3;
                                        goods = goods + 15;
                                        prosperity = prosperity + 5;


                                    }


                                }

                                if (rann == 2 && mountains! < 3)
                                {


                                    //generalmines
                                    //goldmine
                                    // coal mine
                                    // iron mine
                                    // silver mine

                                    int ran = UnityEngine.Random.Range(1, 5);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "generalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "generalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "generalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "goldmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "goldmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "goldmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "coalmine1";
                                            mountains = mountains - 3;
                                            prosperity = prosperity + 5;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "coalmine2";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 12;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "coalmine3";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 19;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 4)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "ironmine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 10;
                                            goods = goods + 10;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "ironmine2";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 22;
                                            goods = goods + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "ironmine3";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 34;
                                            goods = goods + 34;
                                        }


                                    }
                                    if (ran == 5)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 6;
                                            prosperity = prosperity + 15;
                                            goods = goods + 5;
                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 12;
                                            prosperity = prosperity + 32;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "silvermine1";
                                            mountains = mountains - 24;
                                            prosperity = prosperity + 49;
                                            goods = goods + 19;
                                        }


                                    }
                                }

                                // forest then water

                                if (rann == 3 && forest! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 3);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "charcoalburner1";
                                            forest = forest - 1;
                                            goods = goods + 5;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "charcoalburner2";
                                            forest = forest - 2;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "charcoalburner3";
                                            forest = forest - 3;
                                            goods = goods + 19;
                                        }


                                    }

                                    if (ran == 2)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "lumbermill1";
                                            forest = forest - 1;
                                            prosperity = prosperity + 5;
                                            goods = goods + 5;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "lumbermill2";
                                            farmland = farmland - 2;
                                            prosperity = prosperity + 12;
                                            goods = goods + 12;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "lumbermill3";
                                            farmland = farmland - 12;

                                            prosperity = prosperity + 19;
                                            prosperity = prosperity + 19;
                                        }


                                    }

                                    if (ran == 3)
                                    {

                                        if (ran2 == 1)
                                        {

                                            newseed = newseed + "huntersguild1";
                                            forest = forest - 3;
                                            food = food + 10;
                                            goods = goods + 10;

                                        }
                                        if (ran == 2)
                                        {
                                            newseed = newseed + "huntersguild2";
                                            farmland = farmland - 6;
                                            food = food + 22;
                                            goods = goods + 22;

                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "huntersguild3";
                                            forest = forest - 12;

                                            food = food + 34;
                                            goods = goods + 34;

                                        }


                                    }





                                }

                                if (rann == 4 && water! < 1)
                                {


                                    //charcoal burners
                                    //lumber mills
                                    //hunters guild

                                    int ran = UnityEngine.Random.Range(1, 2);
                                    int ran2 = UnityEngine.Random.Range(1, 3);

                                    if (ran == 1)
                                    {

                                        if (ran2 == 1)
                                        {
                                            newseed = newseed + "fishingdock1";
                                            water = water - 1;
                                            food = food + 10;

                                        }


                                        if (ran == 2)
                                        {
                                            newseed = newseed + "fishingdock2";
                                            water = water - 2;
                                            food = food + 22;
                                        }
                                        if (ran == 3)
                                        {
                                            newseed = newseed + "fishingdock3";
                                            water = water - 3;
                                            food = food + 34;
                                        }


                                    }








                                }

                            }
                        }
                        pop = food + UnityEngine.Random.Range(30, 120);

                        //   for (int q = 0; q < 50; q++)
                        // {


                        //  }

                        int tempfood = food;
                        int tempgoods = goods;
                        int tempprosperity = prosperity;
                        //  Debug.Log("AWE");
                        for (int v = 0; v < 50; v++)
                        {



                            // if (tempfood! < 0 || tempgoods! < 0 || tempprosperity! < 0)
                            // {

                            // it was 83
                            // they can go into negatives
                            int rann = UnityEngine.Random.Range(1, 8);


                            //temple
                            if (rann == 1 && tempprosperity! < 100)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 100 && tempgoods <= 200 && ran == 1)
                                {

                                    newseed = newseed + "temple1";
                                    tempgoods = tempgoods - 100;
                                    tempprosperity = tempprosperity - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {

                                    newseed = newseed + "temple2";
                                    tempgoods = tempgoods - 200;
                                    tempprosperity = tempprosperity - 100;
                                }


                                if (tempgoods >= 300 && ran == 3)
                                {

                                    newseed = newseed + "temple3";
                                    tempgoods = tempgoods - 300;
                                    tempprosperity = tempprosperity - 100;
                                }



                            }

                            // tavern

                            if (rann == 2 && tempprosperity! < 20)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran == 1)
                                {
                                    newseed = newseed + "tavern1";
                                    tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;
                                }


                                if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                {
                                    newseed = newseed + "tavern2";
                                    tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                }

                                if (tempgoods >= 60 && ran == 3)
                                {
                                    newseed = newseed + "tavern3";
                                    tempgoods = tempgoods - 60;

                                    tempprosperity = tempprosperity - 20;
                                }



                            }

                            // library
                            //  if (rann == 3 && tempprosperity! < 100)
                            if (rann == 3)
                            {



                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempprosperity >= 100 && tempprosperity <= 200 && ran == 1)
                                {


                                    newseed = newseed + "library1";
                                    tempprosperity = tempprosperity - 100;
                                    tempprosperity = tempprosperity - 100;

                                }


                                if (tempprosperity >= 200 && tempprosperity <= 300 && ran == 2)
                                {
                                    newseed = newseed + "library2";
                                    tempprosperity = tempprosperity - 200;
                                    tempprosperity = tempprosperity - 100;
                                }

                                if (tempprosperity >= 300 && ran == 3)
                                {
                                    newseed = newseed + "library3";
                                    tempprosperity = tempprosperity - 300;

                                    tempprosperity = tempprosperity - 100;
                                }


                            }

                            // walls

                            //if (rann == 4 && tempgoods! < 200)
                            if (rann == 4)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 200 && tempgoods <= 400 && ran == 1)
                                {
                                    newseed = newseed + "walls1";
                                    tempgoods = tempgoods - 200;

                                }


                                if (tempgoods >= 400 && tempgoods <= 600 && ran == 2)
                                {
                                    newseed = newseed + "walls2";
                                    tempgoods = tempgoods - 400;
                                }

                                if (tempgoods >= 600 && ran == 3)
                                {
                                    newseed = newseed + "walls3";
                                    tempgoods = tempgoods - 600;

                                }



                            }

                            // market

                            if (rann == 5 && tempgoods! < 100)
                            {


                                int ran = UnityEngine.Random.Range(1, 3);



                                if (tempgoods >= 10 && tempgoods <= 200 && ran == 1)
                                {
                                    newseed = newseed + "market1";
                                    tempgoods = tempgoods - 100;
                                    tempgoods = tempgoods - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {
                                    newseed = newseed + "market2";
                                    tempgoods = tempgoods - 200;
                                    tempgoods = tempgoods - 100;
                                }

                                if (tempgoods >= 300 && ran == 3)
                                {
                                    newseed = newseed + "market3";
                                    tempgoods = tempgoods - 300;
                                    tempgoods = tempgoods - 100;

                                }



                            }

                            // shop

                            if (rann == 6 && tempprosperity! < 20)
                            {



                                int ran = UnityEngine.Random.Range(1, 3);


                                if (tempgoods >= 20 && tempgoods <= 40 && ran == 1)
                                {
                                    newseed = newseed + "shop1";
                                    tempgoods = tempgoods - 20;
                                    tempprosperity = tempprosperity - 20;

                                }


                                if (tempgoods >= 40 && tempgoods <= 60 && ran == 2)
                                {
                                    newseed = newseed + "shop2";
                                    tempgoods = tempgoods - 40;
                                    tempprosperity = tempprosperity - 20;
                                }

                                if (tempgoods >= 60 && ran == 3)
                                {
                                    newseed = newseed + "shop3";
                                    tempgoods = tempgoods - 60;
                                    tempprosperity = tempprosperity - 20;

                                }



                            }

                            //barracks

                            // if (rann == 7 && tempfood! < 100)
                            if (rann == 7)
                            {

                                int ran = UnityEngine.Random.Range(1, 3);

                                if (tempgoods >= 100 && tempgoods <= 200 && ran == 1)
                                {
                                    newseed = newseed + "barracks1";
                                    tempgoods = tempgoods - 100;
                                    tempfood = tempfood - 100;
                                }


                                if (tempgoods >= 200 && tempgoods <= 300 && ran == 2)
                                {
                                    newseed = newseed + "barracks2";
                                    tempgoods = tempgoods - 200;
                                    tempfood = tempfood - 100;
                                }

                                if (tempgoods >= 300 && ran == 3)
                                {
                                    newseed = newseed + "barracks3";
                                    tempgoods = tempgoods - 300;
                                    tempfood = tempfood - 100;

                                }



                            }

                            //  }
                        }

                        //now take the values and make it stuff
                        if (food >= 301)
                        {
                            newseed = newseed + "foodabundance";

                        }
                        if (food >= 200 && food <= 300)
                        {
                            newseed = newseed + "foodplenty";

                        }

                        if (food >= 100 && food <= 199)
                        {
                            newseed = newseed + "foodsurplus";

                        }

                        if (food <= 100)
                        {
                            newseed = newseed + "foodscarce";

                        }

                        //over 300 food an abundance
                        //200 plenty
                        //over 100 surplus
                        //0 scarse 


                        if (prosperity >= 601)
                        {
                            newseed = newseed + "prosperityrich";

                        }
                        if (prosperity >= 400 && prosperity <= 600)
                        {
                            newseed = newseed + "prosperityplenty";

                        }

                        if (prosperity >= 300 && prosperity <= 399)
                        {
                            newseed = newseed + "prosperityaverage";

                        }

                        if (prosperity >= 200 && prosperity <= 299)
                        {
                            newseed = newseed + "prosperitypoor";

                        }

                        if (prosperity <= 100)
                        {
                            newseed = newseed + "prosperitydesolate";

                        }

                        // over 600 is rich
                        // over 400 plenty
                        // over 300 average
                        //under 200 needy
                        // under 100 desolate 


                        if (goods >= 601)
                        {
                            newseed = newseed + "goodsabundance";

                        }
                        if (goods >= 400 && goods <= 600)
                        {
                            newseed = newseed + "goodsplenty";

                        }

                        if (goods >= 300 && goods <= 399)
                        {
                            newseed = newseed + "goodsaverage";

                        }

                        if (goods >= 200 && goods <= 299)
                        {
                            newseed = newseed + "goodsneedy";

                        }

                        if (goods <= 100)
                        {
                            newseed = newseed + "goodsdesolate";

                        }
                        // over 600 goods an abundance

                        // over 400 plenty
                        // over 300 average
                        //under 200 needy

                        // under 100 desolate 


                        if (pop >= 301)
                        {
                            newseed = newseed + "veryhighpop";

                        }
                        if (pop >= 200 && pop <= 300)
                        {
                            newseed = newseed + "highpop";

                        }

                        if (pop >= 100 && pop <= 199)
                        {
                            newseed = newseed + "averagepop";

                        }

                        if (pop >= 51 && pop <= 99)
                        {
                            newseed = newseed + "quiet";

                        }

                        if (pop <= 50)
                        {
                            newseed = newseed + "veryquiet";

                        }

                        // over 300 people very high population
                        //over 200 high
                        //over 100 average
                        //under 100 quiet
                        //under 50 very quiet
                     //   Debug.Log(pop);
                       // Debug.Log(newseed);
                        //   Debug.Log(" food: " + food);
                        //  Debug.Log(" goods: " + goods);
                        //   Debug.Log(" prosperity: " + prosperity);
                        // Debug.Log(" Pop:" + pop);


                        hamletseeds[i, y] = newseed;

                    }



                }

            }

        }
        return hamletseeds;
    }

   

    int[,] make_noise_grid(int density)
    {

        int[,] noise_grid = new int[width, height];

        
        

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                int ran = UnityEngine.Random.Range(1, 100);
                if (ran >= density)
                {


                    noise_grid[x,y] = 1;
                    

                   


                }

                else if (ran < density)
                {

                    noise_grid[x, y] = 2;
                   
                   
                }


               

            }

           
        }
       

        return noise_grid;
    }



    int[,] make_location_grid(int[,] noise_grid)
    {

        int[,] location_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        

     

               // for (int c = 0; c < noise_grid.GetLength(0); c++)
            //    {


                //    for (int d = 0; d < noise_grid.GetLength(1); d++)
                //    {

                  //      location_grid[c, d] = noise_grid[c, d];




                  //  }

              //  }




      


        return location_grid;
    }

    string[,] make_hamlet_grid(int[,] noise_grid)
    {

        string[,] location_grid = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        return location_grid;
    }

    string[,] make_town_grid(int[,] noise_grid)
    {

        string[,] location_grid = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        return location_grid;
    }

    string[,] make_city_grid(int[,] noise_grid)
    {

        string[,] location_grid = new string[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        return location_grid;
    }


   

    void apply_cellular_automaton(int[,] noise_grid, int count)
    {


        for (int x = 0; x < count; x++)
        {
       



            //   int[,] noise_grid = new int[width, height];

            int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }


            for (int i = 0; i < temp_grid.GetLength(0); i++)
            {

                for (int y = 0; y < temp_grid.GetLength(1); y++)
                {

                    int neighbour_wall_count = 0;

                    int a = i - 1;
                    int a2 = i + 1;
                    int b = y - 1;

                    // this wrong
                    //this right now
                    int b2 = y +1;


                    if (a >= 0 && a < temp_grid.GetLength(0))
                    {


                        if (a != i || b != y)
                        {

                            if (temp_grid[a, y] == 2)
                            {

                                neighbour_wall_count++;

                            }

                        }


                    }
                    if ((a! >= 0 && a! < temp_grid.GetLength(0)))
                    {


                        neighbour_wall_count++;

                    }

                    if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                    {
                        if (a2 != i || b2 != y)
                        {
                            if (temp_grid[a2, y] == 2)
                            {

                                neighbour_wall_count++;

                            }
                        }
                    }

                    if ((a2! >= 0 && a2! < temp_grid.GetLength(0)))
                    {


                        neighbour_wall_count++;

                    }

                    if (b >= 0 && b < temp_grid.GetLength(1))
                    {
                        if (a != i || b != y)
                        {
                            if (temp_grid[i, b] == 2)
                            {

                                neighbour_wall_count++;

                            }
                        }
                    }
                    if ((b! >= 0 && b! < temp_grid.GetLength(1)))
                    {


                        neighbour_wall_count++;

                    }

                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                    {
                        if (a2 != i || b2 != y)
                        {
                            if (temp_grid[i, b2] == 2)
                            {

                                neighbour_wall_count++;

                            }
                        }
                    }
                    if ((b2! >= 0 && b2! < temp_grid.GetLength(1)))
                    {


                        neighbour_wall_count++;

                    }




                    if (neighbour_wall_count > 4)
                    {

                        noise_grid[i, y] = 1;

                    }

                    else
                    {
                        noise_grid[i, y] = 2;


                    }


                }


            }
        }
    }

    void apply_cellular_automaton2(int[,] noise_grid, int count)
    {


        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        

        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }


            //   int[,] noise_grid = new int[width, height];


            //aaaaaaaaaaaaaa

            for (int i = 0; i < temp_grid.GetLength(0); i++)
            {

                for (int y = 0; y < temp_grid.GetLength(1); y++)
                {

                    int neighbour_water_count = 0;

                    int neighbour_land_count = 0;

                    int a = i - 1;
                    int a2 = i + 1;
                    int b = y - 1;
                    int b2 = y + 1;

                    int[,] tl = new int[1, 1];
                    int[,] tr = new int[1, 1];

                    int[,] bl = new int[1, 1];
                    int[,] br = new int[1, 1];

                    

                   

                    if (a >= 0 && b2 >= 0 && a <= temp_grid.GetLength(0) && b2 < temp_grid.GetLength(1)) 
                    {

                        

                        tl[0, 0] = temp_grid[a, b2];

                        

                        if (a != i || b2 != y)
                        {

                            if (tl[0,0] == 2)
                            {
                                
                                neighbour_water_count++;

                            }

                            if (tl[0, 0] == 1)
                            {
                               
                                neighbour_land_count++;

                            }


                        }

                    }

                    if (a !> 0 || b2 !> 0 || a !< temp_grid.GetLength(0) || b2 !< temp_grid.GetLength(1)) {


                        neighbour_water_count++;

                    }

                    if (a2! > 0 || b! > 0 || a2! < temp_grid.GetLength(0) || b! < temp_grid.GetLength(1))
                    {


                        neighbour_water_count++;

                    }


                    if (a2 >= 0 && b2 >= 0 && a2 < temp_grid.GetLength(0) && b2 < temp_grid.GetLength(1))
                    {

                        
                       
                        tr[0, 0] = temp_grid[a2, b2];



                        
                            

                        if (a2 != i || b2 != y)
                        {

                            if (tr[0, 0] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (tr[0, 0] == 1)
                            {

                                neighbour_land_count++;

                            }


                        }


                    }


                    if (a2 !>= 0 || b2 >= 0 || a2 !<= temp_grid.GetLength(0) || b2 !<= temp_grid.GetLength(1))
                    {


                      //  neighbour_water_count++;

                    }

                    if (a >= 0 && b >= 0 && a <= temp_grid.GetLength(0) && b <= temp_grid.GetLength(1)) {

                        
                        bl[0, 0] = temp_grid[a, b];

                        if (a != i || b != y)
                        {

                            if (bl[0, 0] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (bl[0, 0] == 1)
                            {

                                neighbour_land_count++;

                            }


                        }

                    }


                    if (a !>= 0 || b >= 0 || a !<= temp_grid.GetLength(0) || b !<= temp_grid.GetLength(1))
                        {


                      //  neighbour_water_count++;

                    }



                    if (a2 >= 0 && b2 >= 0 && a2 < temp_grid.GetLength(0) && b2 < temp_grid.GetLength(1))
                    {

                      
                        br[0, 0] = temp_grid[a2, b2];



                    }

                    if (a2 !>= 0 || b2 !>= 0 || a2 !<= temp_grid.GetLength(0) || b2 !<= temp_grid.GetLength(1))
                    {


                      //  neighbour_water_count++;

                    }







                    if (a >= 0 && a < temp_grid.GetLength(0))
                    {


                        if (a != i || b != y)
                        {

                            if (temp_grid[a, y] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (temp_grid[a, y] == 1)
                            {

                                neighbour_land_count++;

                            }

                        }


                    }
                    

                    if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                    {
                        if (a2 != i || b2 != y)
                        {
                            if (temp_grid[a2, y] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (temp_grid[a2, y] == 1)
                            {

                                neighbour_land_count++;

                            }
                        }
                    }

                   

                    if (b >= 0 && b < temp_grid.GetLength(1))
                    {
                        if (a != i || b != y)
                        {
                            if (temp_grid[i, b] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (temp_grid[i, b] == 1)
                            {

                                neighbour_land_count++;

                            }
                        }
                    }
                  

                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                    {
                        if (a2 != i || b2 != y)
                        {
                            if (temp_grid[i, b2] == 2)
                            {

                                neighbour_water_count++;

                            }

                            if (temp_grid[i, b2] == 1)
                            {

                                neighbour_land_count++;

                            }
                        }
                    }
                   




                    if (neighbour_land_count > 4)
                    {

                        noise_grid[i, y] = 1;

                    }

                    if (neighbour_water_count > 4)
                    {
                        noise_grid[i, y] = 2;


                    }


                }


            }
        }
    }


   





    void add_sand(int[,] noise_grid)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        for (int c = 0; c < noise_grid.GetLength(0); c++)
        {


            for (int d = 0; d < noise_grid.GetLength(1); d++)
            {

                temp_grid[c, d] = noise_grid[c, d];




            }

        }

        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {



                int a = i - 1;
                int a2 = i + 1;
                int b = y - 1;
                int b2 = y - 2;





                if (a >= 0 && a < temp_grid.GetLength(0))
                {


                    if (a != i || b != y)
                    {

                        if (temp_grid[a, y] == 2)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {
                                    
                                      
                                        if (temp_grid[a, y] == 2 && temp_grid[a2, y] == 1) {

                                            
                                            noise_grid[i, y] = 5;


                                        }


                                        if (temp_grid[a2, y] == 2 && temp_grid[a, y] == 1) {

                                           
                                            noise_grid[i, y] = 5;

                                        }


                                    
                                }
                            }

                        }

                    }


                }

               

            

                if (b >= 0 && b < temp_grid.GetLength(1))
                {
                    if (a != i || b != y)
                    {
                        if (temp_grid[i, b] == 2)
                        {

                            if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                            {
                                if (a2 != i || b2 != y)
                                {
                                   
                                    


                                        if(temp_grid[i, b] == 2 && temp_grid[i, b2] == 1) {

                                            noise_grid[i, y] = 5;

                                        }


                                        if (temp_grid[i, b2] == 2 && temp_grid[i, b] == 1)
                                        {


                                            noise_grid[i, y] = 5;



                                        }


                                    
                                }
                            }

                        }
                    }
                }
            

               



            }

        }

    }

    void smooth_land(int[,] noise_grid)
    {

        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        for (int c = 0; c < noise_grid.GetLength(0); c++)
        {


            for (int d = 0; d < noise_grid.GetLength(1); d++)
            {

                temp_grid[c, d] = noise_grid[c, d];




            }



        }

        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {


                

                int a = i - 1;
                int a2 = i + 1;
                int b = y - 1;
                int b2 = y + 1;

               




                    if (a >= 0 && a < temp_grid.GetLength(0))
                {


                    if (a != i || b != y)
                    {

                        if (temp_grid[a, y] == 2)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {


                                    if (temp_grid[a, y] == 2 && temp_grid[a2, y] == 1)
                                    {
                                        //1, 3
                                        int ran = UnityEngine.Random.Range(1, 3);
                                      

                                        // want to do it a side, thats water side

                                        for (int k = 0; k < ran; k++)
                                        {

                                            noise_grid[i - k, y] = 1;
                                          





                                        }



                                    }


                                   

                                              


                                }
                            }
                        }

                        if (temp_grid[a, y] == 1)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {


                                    if (temp_grid[a, y] == 1 && temp_grid[a2, y] == 2)
                                    {
                                        int ran = UnityEngine.Random.Range(1, 3);

                                        // want to do it a side, thats water side

                                        for (int k = 0; k < ran; k++)
                                        {

                                            noise_grid[i + k, y] = 1;





                                        }



                                    }
                                }
                            }
                        }



                        if (b >= 0 && b < temp_grid.GetLength(1))
                        {
                            if (a != i || b != y)
                            {
                                if (temp_grid[i, b] == 2)
                                {

                                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                    {
                                        if (a2 != i || b2 != y)
                                        {




                                            if (temp_grid[i, b] == 2 && temp_grid[i, b2] == 1)
                                            {

                                               

                                                int ran = UnityEngine.Random.Range(1, 3);

                                                // want to do it a side, thats water side

                                                for (int k = 0; k < ran; k++)
                                                {

                                                    noise_grid[i, y - k] = 1;





                                                }

                                            }


                                            



                                        }
                                    }

                                }

                                if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                {

                                    if (temp_grid[i, b2] == 2)
                                    {

                                        if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                        {
                                            if (a2 != i || b2 != y)
                                            {




                                                if (temp_grid[i, b2] == 2 && temp_grid[i, b] == 1)
                                                {



                                                    int ran = UnityEngine.Random.Range(1, 3);

                                                    // want to do it a side, thats water side

                                                    for (int k = 0; k < ran; k++)
                                                    {
                                                       
                                                        noise_grid[i, y + k] = 1;





                                                    }

                                                }


                                                



                                            }
                                        }

                                    }

                                }
                                  
                            }
                        }



                    }
                }



                    




            }
        }
    }

    void smooth_all(int[,] noise_grid, int smoothmin, int smoothmax)
    {

        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        for (int c = 0; c < noise_grid.GetLength(0); c++)
        {


            for (int d = 0; d < noise_grid.GetLength(1); d++)
            {

                temp_grid[c, d] = noise_grid[c, d];




            }



        }

        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {

                int z = temp_grid[i, y];
                int a = i - 1;
                int a2 = i + 1;
                int b = y - 1;
                int b2 = y + 1;
                if (a >= 0 && a < temp_grid.GetLength(0))
                {


                    if (a != i || b != y)
                    {




                        if (temp_grid[a, y] >= 2)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {


                                    if (temp_grid[a, y] >= 2 && temp_grid[a2, y] >= 1)
                                    {
                                        //1, 3
                                        int ran = UnityEngine.Random.Range(smoothmin, smoothmax);


                                        // want to do it a side, thats water side

                                        for (int k = 0; k < ran; k++)
                                        {


                                            if (i - k >= 0 && y >= 0 && i - k <= temp_grid.GetLength(0)
                                         && y < temp_grid.GetLength(1))
                                            {

                                                if (i - k != i)
                                                {



                                                    //if (noise_grid[i - k, y] != 1) {

                                                    noise_grid[i - k, y] = z;

                                                    // }

                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }



                        //!!!!!! 




                      





        /*

                                if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                {

                                    if (temp_grid[a2, y] >= 2)
                                    {

                                        if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                        {

                                            if (a2 != i || b2 != y)
                                            {


                                                if (temp_grid[a2, y] >= 2 && temp_grid[a2, y] != 1)

                                                {




                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                    // want to do it a side, thats water side

                                                    for (int k = 0; k < ran; k++)
                                                    {


                                                        if (i + k >= 0 && y >= 0 && i + k <= temp_grid.GetLength(0)
                                                     && y < temp_grid.GetLength(1))
                                                        {

                                                            if (i + k != i)
                                                            {

                                                                //  if (noise_grid[i + k, y] != 1)
                                                                // {
                                                                noise_grid[i + k, y] = z;
                                                                // }




                                                            }
                                                        }


                                                    }



                                                }
                                            }
                                        }
                                    }
                                }
                                */



        if (b >= 0 && b < temp_grid.GetLength(1))
                        {
                            if (a != i || b != y)
                            {
                                if (temp_grid[i, b] >= 2)
                                {

                                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                    {
                                        if (a2 != i || b2 != y)
                                        {




                                            if (temp_grid[i, b] >= 2 && temp_grid[i, b2] >= 1)
                                            {



                                                int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                // want to do it a side, thats water side

                                                for (int k = 0; k < ran; k++)
                                                {


                                                    if (i >= 0 && y - k >= 0 && i <= temp_grid.GetLength(0)
                                         && y - k < temp_grid.GetLength(1))
                                                    {

                                                        if (y - k != y)
                                                        {
                                                            //   if (noise_grid[i, y - k] != 1) {

                                                            noise_grid[i, y - k] = z;
                                                            //    }


                                                        }
                                                    }






                                                }

                                            }






                                        }
                                    }

                                }

                                if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                {

                                    if (temp_grid[i, b2] >= 2)
                                    {

                                        if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                        {
                                            if (a2 != i || b2 != y)
                                            {




                                                if (temp_grid[i, b2] >= 2 && temp_grid[i, b] >= 1)
                                                {



                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                    // want to do it a side, thats water side

                                                    for (int k = 0; k < ran; k++)
                                                    {


                                                        if (i >= 0 && y + k >= 0 && i <= temp_grid.GetLength(0)
                                         && y + k < temp_grid.GetLength(1))
                                                        {

                                                            if (y + k != y)
                                                            {
                                                                //   if (noise_grid[i, y + k] != 1) {
                                                                noise_grid[i, y + k] = z;

                                                              
                                                                // }


                                                            }
                                                        }






                                                    }

                                                }






                                            }
                                        }

                                    }

                                }


                            }
                        }



                    }
                }








            }
        }
    }


    void smooth_water(int[,] noise_grid, int smoothmin, int smoothmax)
    {

        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        for (int c = 0; c < noise_grid.GetLength(0); c++)
        {


            for (int d = 0; d < noise_grid.GetLength(1); d++)
            {

                temp_grid[c, d] = noise_grid[c, d];




            }



        }

        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {

                int z = temp_grid[i, y];
                int a = i - 1;
                int a2 = i + 1;
                int b = y - 1;
                int b2 = y + 1;
                if (a >= 0 && a < temp_grid.GetLength(0))
                {


                    if (a != i || b != y)
                    {




                        if (temp_grid[a, y] >= 1)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {


                                    if (temp_grid[a, y] >= 1 && temp_grid[a2, y] >= 1)
                                    {

                                        
                                            //1, 3
                                            int ran = UnityEngine.Random.Range(smoothmin, smoothmax);


                                        // want to do it a side, thats water side

                                        for (int k = 0; k < ran; k++)
                                        {


                                            if (i - k >= 0 && y >= 0 && i - k <= temp_grid.GetLength(0)
                                         && y < temp_grid.GetLength(1))
                                            {

                                                if (i - k != i)
                                                {



                                                    //if (noise_grid[i - k, y] != 1) {

                                                    noise_grid[i - k, y] = z;

                                                    // }

                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }



                        //!!!!!! 










                        /*

                                                if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                                {

                                                    if (temp_grid[a2, y] >= 2)
                                                    {

                                                        if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                                        {

                                                            if (a2 != i || b2 != y)
                                                            {


                                                                if (temp_grid[a2, y] >= 2 && temp_grid[a2, y] != 1)

                                                                {




                                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                                    // want to do it a side, thats water side

                                                                    for (int k = 0; k < ran; k++)
                                                                    {


                                                                        if (i + k >= 0 && y >= 0 && i + k <= temp_grid.GetLength(0)
                                                                     && y < temp_grid.GetLength(1))
                                                                        {

                                                                            if (i + k != i)
                                                                            {

                                                                                //  if (noise_grid[i + k, y] != 1)
                                                                                // {
                                                                                noise_grid[i + k, y] = z;
                                                                                // }




                                                                            }
                                                                        }


                                                                    }



                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                */



                        if (b >= 0 && b < temp_grid.GetLength(1))
                        {
                            if (a != i || b != y)
                            {
                                if (temp_grid[i, b] >= 1)
                                {

                                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                    {
                                        if (a2 != i || b2 != y)
                                        {




                                            if (temp_grid[i, b] >= 1 && temp_grid[i, b2] >= 1)
                                            {



                                                int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                // want to do it a side, thats water side

                                                for (int k = 0; k < ran; k++)
                                                {


                                                    if (i >= 0 && y - k >= 0 && i <= temp_grid.GetLength(0)
                                         && y - k < temp_grid.GetLength(1))
                                                    {

                                                        if (y - k != y)
                                                        {
                                                            //   if (noise_grid[i, y - k] != 1) {

                                                            noise_grid[i, y - k] = z;
                                                            //    }


                                                        }
                                                    }






                                                }

                                            }






                                        }
                                    }

                                }

                                if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                {

                                    if (temp_grid[i, b2] >= 1)
                                    {

                                        if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                        {
                                            if (a2 != i || b2 != y)
                                            {




                                                if (temp_grid[i, b2] >= 1 && temp_grid[i, b] >= 1)
                                                {



                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                    // want to do it a side, thats water side

                                                    for (int k = 0; k < ran; k++)
                                                    {


                                                        if (i >= 0 && y + k >= 0 && i <= temp_grid.GetLength(0)
                                         && y + k < temp_grid.GetLength(1))
                                                        {

                                                            if (y + k != y)
                                                            {
                                                                //   if (noise_grid[i, y + k] != 1) {
                                                                noise_grid[i, y + k] = z;


                                                                // }


                                                            }
                                                        }






                                                    }

                                                }






                                            }
                                        }

                                    }

                                }


                            }
                        }



                    }
                }








            }
        }
    }

    void smooth_water2(int[,] noise_grid, int smoothmin, int smoothmax)
    {

        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        for (int c = 0; c < noise_grid.GetLength(0); c++)
        {


            for (int d = 0; d < noise_grid.GetLength(1); d++)
            {

                temp_grid[c, d] = noise_grid[c, d];




            }



        }

        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {

                int z = temp_grid[i, y];
                int a = i - 1;
                int a2 = i + 1;
                int b = y - 1;
                int b2 = y + 1;
                if (a >= 0 && a < temp_grid.GetLength(0))
                {


                    if (a != i || b != y)
                    {




                        if (temp_grid[a, y] >= 1)
                        {

                            if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                            {
                                if (a2 != i || b2 != y)
                                {


                                    if (temp_grid[a, y] >= 1 && temp_grid[a2, y] >= 1)
                                    {



                                        if (temp_grid[a, y] == 1 || temp_grid[a2, y] == 1)
                                        {
                                            //1, 3
                                            int ran = UnityEngine.Random.Range(smoothmin, smoothmax);


                                            // want to do it a side, thats water side

                                            for (int k = 0; k < ran; k++)
                                            {


                                                if (i - k >= 0 && y >= 0 && i - k <= temp_grid.GetLength(0)
                                             && y < temp_grid.GetLength(1))
                                                {

                                                    if (i - k != i)
                                                    {



                                                        //if (noise_grid[i - k, y] != 1) {

                                                        noise_grid[i - k, y] = 1;

                                                        // }

                                                    }
                                                }
                                            }


                                        }

                                          
                                    }

                                }
                            }
                        }



                        //!!!!!! 










                        /*

                                                if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                                {

                                                    if (temp_grid[a2, y] >= 2)
                                                    {

                                                        if (a2 >= 0 && a2 < temp_grid.GetLength(0))
                                                        {

                                                            if (a2 != i || b2 != y)
                                                            {


                                                                if (temp_grid[a2, y] >= 2 && temp_grid[a2, y] != 1)

                                                                {




                                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                                    // want to do it a side, thats water side

                                                                    for (int k = 0; k < ran; k++)
                                                                    {


                                                                        if (i + k >= 0 && y >= 0 && i + k <= temp_grid.GetLength(0)
                                                                     && y < temp_grid.GetLength(1))
                                                                        {

                                                                            if (i + k != i)
                                                                            {

                                                                                //  if (noise_grid[i + k, y] != 1)
                                                                                // {
                                                                                noise_grid[i + k, y] = z;
                                                                                // }




                                                                            }
                                                                        }


                                                                    }



                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                */



                        if (b >= 0 && b < temp_grid.GetLength(1))
                        {
                            if (a != i || b != y)
                            {
                                if (temp_grid[i, b] >= 1)
                                {

                                    if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                    {
                                        if (a2 != i || b2 != y)
                                        {




                                            if (temp_grid[i, b] >= 1 && temp_grid[i, b2] >= 1)
                                            {


                                                if (temp_grid[i, b] == 1 || temp_grid[i, b2] == 1)
                                                {

                                                    int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                    // want to do it a side, thats water side

                                                    for (int k = 0; k < ran; k++)
                                                    {


                                                        if (i >= 0 && y - k >= 0 && i <= temp_grid.GetLength(0)
                                             && y - k < temp_grid.GetLength(1))
                                                        {

                                                            if (y - k != y)
                                                            {
                                                                //   if (noise_grid[i, y - k] != 1) {

                                                                noise_grid[i, y - k] = 1;
                                                                //    }


                                                            }
                                                        }






                                                    }
                                                }


                                                  

                                            }






                                        }
                                    }

                                }

                                if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                {

                                    if (temp_grid[i, b2] >= 1)
                                    {

                                        if (b2 >= 0 && b2 < temp_grid.GetLength(1))
                                        {
                                            if (a2 != i || b2 != y)
                                            {




                                                if (temp_grid[i, b2] >= 1 && temp_grid[i, b] >= 1)
                                                {


                                                    if (temp_grid[i, b2] == 1 || temp_grid[i, b] == 1)
                                                    {

                                                        int ran = UnityEngine.Random.Range(smoothmin, smoothmax);

                                                        // want to do it a side, thats water side

                                                        for (int k = 0; k < ran; k++)
                                                        {


                                                            if (i >= 0 && y + k >= 0 && i <= temp_grid.GetLength(0)
                                             && y + k < temp_grid.GetLength(1))
                                                            {

                                                                if (y + k != y)
                                                                {
                                                                    //   if (noise_grid[i, y + k] != 1) {
                                                                    noise_grid[i, y + k] = 1;


                                                                    // }


                                                                }
                                                            }






                                                        }
                                                    }


                                                      

                                                }






                                            }
                                        }

                                    }

                                }


                            }
                        }



                    }
                }








            }
        }
    }
  

    void add_mountains(int[,] noise_grid, int mamount) {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

       
      //  Debug.Log("Ran 4 = " + ran4);
        bool done = false;

        //  int[] mlocationx = new int[mamount+1];
        //  int[] mlocationy = new int[mamount+1];
        //  int a = 0;
        // int b = 0;



        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < mamount; x++) {
           
            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            



            

           



            if (temp_grid[ran, ran2] == 2) {

               

                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {
                        
                        if (i == ran && y == ran2)
                        {

                          


                                noise_grid[i, y] = 3;

                            //    Debug.Log(ran4)


                            // or then for every hmountain tile do similiar around it to a smaller scale

                            /// It only does it once as then done != false anymore! So it only does it for the first 
                            /// mountain generated
                            ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                            // if (done == false) {
                            int ran4 = UnityEngine.Random.Range(1, msize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, msparsity);
                                
                                int rann2 = UnityEngine.Random.Range(1, msparsity);
                                int rann3 = UnityEngine.Random.Range(1, msparsity);
                                int rann4 = UnityEngine.Random.Range(1, msparsity);
                                int rann5 = UnityEngine.Random.Range(1, msparsity);
                                int rann6 = UnityEngine.Random.Range(1, msparsity);
                                int rann7 = UnityEngine.Random.Range(1, msparsity);
                                int rann8 = UnityEngine.Random.Range(1, msparsity);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                                // Top left
                                if (rann1 == 2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0) 
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y) {

                                           
                                            noise_grid[i - 1 - q, y + 1 + q] = 3;
                                        }
                                    } 
    
                                }

                              


                                
                                // Top right 
                                        if (rann2 == 2)
                                        {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                           
                                            noise_grid[i + 1 + q, y + 1 + q] = 3;
                                        }
                                    }
                                        }


                                        // Bottom left
                                        if (rann3 == 2)
                                        {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                           
                                            noise_grid[i - 1 - q, y - 1 - q] = 3;
                                        }
                                    }
                                      }


                                // Bottom right
                                if (rann4 == 2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0) 
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                          
                                            noise_grid[i + 1 + q, y - 1 - q] = 3;
                                        }





                                    }
                                }


                                // Left
                                if (rann5 == 2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                           
                                            noise_grid[i - 1 - q, y] = 3;
                                        }
                                        

                                    }
                                }

                                //Right
                                if (rann6 == 2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                           
                                            noise_grid[i + 1 + q, y] = 3;



                                        }


                                    }
                                }

                                // Down
                                        if (rann7 == 2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                           
                                            noise_grid[i, y - 1 - q] = 3;
                                        }
                                    } 

                                        }


                                // Up
                                        if (rann8 == 2)
                                        {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if ( y + 1 + q != y)
                                        {
                                          
                                            noise_grid[i, y + 1 + q] = 3;
                                        }
                                    }
                                        }

                                

                                    
                                }

                                done = true;

                           // }
                          



                            }

                        

                           









                            



                            // mlocationx[a] =ran;
                            // a++;
                            //mlocationy[b] = ran2;
                            // b++;

                            // Debug.Log("Int i =" + i);
                            // Debug.Log(mlocationx[a]);

                            // Debug.Log("Int y =" + y);
                            // Debug.Log(mlocationy[b]);


                        }




                    }                 

                    }

                

            
            
            else { mamount++; }


            




        }
        







            }

    void add_smallmountains(int[,] noise_grid, int mamount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        //  Debug.Log("Ran 4 = " + ran4);
        bool done = false;

        //  int[] mlocationx = new int[mamount+1];
        //  int[] mlocationy = new int[mamount+1];
        //  int a = 0;
        // int b = 0;



        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }


            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);









         


                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {



                if (temp_grid[i, y] == 3)                  
                        {
                   
                            int ran4 = UnityEngine.Random.Range(1, smsize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, 3);                          
                                int rann2 = UnityEngine.Random.Range(1, 3);
                                int rann3 = UnityEngine.Random.Range(1, 3);
                                int rann4 = UnityEngine.Random.Range(1, 3);
                                int rann5 = UnityEngine.Random.Range(1, 3);
                                int rann6 = UnityEngine.Random.Range(1, 3);
                                int rann7 = UnityEngine.Random.Range(1, 3);
                                int rann8 = UnityEngine.Random.Range(1, 3);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                                // Top left
                                if (rann1 == 2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y)
                                        {

                                          
                                    if (noise_grid[i - 1 - q, y + 1 + q] != 3) {

                                        noise_grid[i - 1 - q, y + 1 + q] = 4;
                                    
                                    }
                                        }
                                    }

                                }





                                // Top right 
                                if (rann2 == 2)
                                {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                           
                                    if (noise_grid[i + 1 + q, y + 1 + q] != 3) {

                                        noise_grid[i + 1 + q, y + 1 + q] = 4;
                                    }

                                    

                                }
                                    }
                                }


                                // Bottom left
                                if (rann3 == 2)
                                {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                           
                                    if (noise_grid[i - 1 - q, y - 1 - q] != 3) {

                                        noise_grid[i - 1 - q, y - 1 - q] = 4;
                                    }

                                    
                                }
                                    }
                                }


                                // Bottom right
                                if (rann4 == 2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                          
                                            if (noise_grid[i + 1 + q, y - 1 - q] != 3)
                                    {

                                        noise_grid[i + 1 + q, y - 1 - q] = 4;

                                    }

                                
                                }





                                    }
                                }


                                // Left
                                if (rann5 == 2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                           
                                    if (noise_grid[i - 1 - q, y] != 3) {

                                        noise_grid[i - 1 - q, y] = 4;
                                    }
                                       

                                   
                                }


                                    }
                                }

                                //Right
                                if (rann6 == 2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                           
                                    if (noise_grid[i + 1 + q, y] != 3) {

                                        noise_grid[i + 1 + q, y] = 4;
                                    }

                              



                                }


                                    }
                                }

                                // Down
                                if (rann7 == 2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                          
                                    if (noise_grid[i, y - 1 - q] != 3) {

                                        noise_grid[i, y - 1 - q] = 4;
                                    }

                                    
                                }
                                    }

                                }


                                // Up
                                if (rann8 == 2)
                                {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if (y + 1 + q != y)
                                        {
                                    if (noise_grid[i, y + 1 + q] != 3) {

                                        noise_grid[i, y + 1 + q] = 4;
                                    }

                                   
                                }
                                    }
                                }




                            }

                            done = true;

                            // }




                        }

















                        // mlocationx[a] =ran;
                        // a++;
                        //mlocationy[b] = ran2;
                        // b++;

                        // Debug.Log("Int i =" + i);
                        // Debug.Log(mlocationx[a]);

                        // Debug.Log("Int y =" + y);
                        // Debug.Log(mlocationy[b]);


                    }




                }

            





     







        











        // first check if 2 mountain tiles are within x range of each other and if they are only do it once but make it twice as big - make a great mountain range

        // add small mountains after scaling up?? like smoothing edges of water



        // Need an if != mountain already so it doesnt overwrite the larger ones
        // Need checks in array bounds



        //  for (int x = 0; x < noise_grid.GetLength(0); x++)
        // {
        //   for (int y = 0; y < noise_grid.GetLength(1); y++)
        //  {

        //  if (noise_grid[x, y] == 3)
        //  {


        //   noise_grid[x + 1, y + 1] = 4;
        //  noise_grid[x + 1, y ] = 4;
        //   noise_grid[x + 1, y -1] = 4;
        // works but only does top right, need to take from celluar automota to do the surrounding tiles too or a simplified version

        // check its a land tile first?? and make it a random number of tiles away, like the smoothing effect

        // }



        //  }


        // }


    }

    void add_forests(int[,] noise_grid, int famount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];




        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < famount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);





            // add check that it is land not water easy just do it like checking not mountains



            if (temp_grid[ran, ran2] == 2)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            // !!!!!! add check for not mountains or water here

                            noise_grid[i, y] = 6;

                            //    Debug.Log(ran4)


                            // or then for every hmountain tile do similiar around it to a smaller scale

                            /// It only does it once as then done != false anymore! So it only does it for the first 
                            /// mountain generated
                            ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                            // if (done == false) {
                            int ran4 = UnityEngine.Random.Range(1, fsize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, fsparsity);                             
                                int rann2 = UnityEngine.Random.Range(1, fsparsity);
                                int rann3 = UnityEngine.Random.Range(1, fsparsity);
                                int rann4 = UnityEngine.Random.Range(1, fsparsity);
                                int rann5 = UnityEngine.Random.Range(1, fsparsity);
                                int rann6 = UnityEngine.Random.Range(1, fsparsity);
                                int rann7 = UnityEngine.Random.Range(1, fsparsity);
                                int rann8 = UnityEngine.Random.Range(1, fsparsity);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);

                                // !!!!  make forests WAYYY more dense 

                                // Add checks for land ect then just do small mountains but just add more forest around it instead

                                // Top left
                                if (rann1 >=2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y)
                                        {

                                        
                                            // if (noise_grid[i - 1 - q, y + 1 + q] != 3 && noise_grid[i - 1 - q, y + 1 + q] != 4)
                                            if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y + 1 + q] = 6;

                                            }
                                        }
                                    }

                                }





                                // Top right 
                                if (rann2 >=2)
                                {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                         
                                            // if (noise_grid[i + 1 + q, y + 1 + q] != 3 && noise_grid[i + 1 + q, y + 1 + q] != 4)
                                            if (noise_grid[i + 1 + q, y + 1 + q] ==2)
                                            {

                                                noise_grid[i + 1 + q, y + 1 + q] = 6;
                                            }



                                        }
                                    }
                                }


                                // Bottom left
                                if (rann3 >=2)
                                {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                   
                                            // if (noise_grid[i - 1 - q, y - 1 - q] != 3 && noise_grid[i - 1 - q, y - 1 - q] != 4)
                                            if (noise_grid[i - 1 - q, y - 1 - q] ==2)
                                            {

                                                noise_grid[i - 1 - q, y - 1 - q] = 6;
                                            }


                                        }
                                    }
                                }


                                // Bottom right
                                if (rann4 >=2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                     
                                            //if (noise_grid[i + 1 + q, y - 1 - q] != 3 && noise_grid[i + 1 + q, y - 1 - q] != 4)
                                            if (noise_grid[i + 1 + q, y - 1 - q] ==2)
                                            {

                                                noise_grid[i + 1 + q, y - 1 - q] = 6;

                                            }


                                        }





                                    }
                                }


                                // Left
                                if (rann5 >=2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                         
                                            // if (noise_grid[i - 1 - q, y] != 3 && noise_grid[i - 1 - q, y] != 4)
                                            if (noise_grid[i - 1 - q, y] ==2)
                                            {

                                                noise_grid[i - 1 - q, y] = 6;
                                            }



                                        }


                                    }
                                }

                                //Right
                                if (rann6 >=2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                          
                                            //   if (noise_grid[i + 1 + q, y] != 3 && noise_grid[i + 1 + q, y] != 4)
                                            if (noise_grid[i + 1 + q, y] ==2)
                                            {

                                                noise_grid[i + 1 + q, y] = 6;
                                            }





                                        }


                                    }
                                }

                                // Down
                                if (rann7>=2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                    
                                            //if (noise_grid[i, y - 1 - q] != 3 && noise_grid[i, y - 1 - q] != 4 )
                                            if (noise_grid[i, y - 1 - q] ==2 )
                                            {

                                                noise_grid[i, y - 1 - q] = 6;
                                            }


                                        }
                                    }

                                }


                                // Up
                                if (rann8 >=2)
                                {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if (y + 1 + q != y)
                                        {
                                   
                                            //  if (noise_grid[i, y + 1 + q] != 3 && noise_grid[i, y + 1 + q] != 4)
                                            if (noise_grid[i, y + 1 + q] ==2)
                                            {

                                                noise_grid[i, y + 1 + q] = 6;
                                            }


                                        }
                                    }
                                }
                            }





                        }
                    }







                }

            }
        }
    }


    void expand_forests(int[,] noise_grid, int famount)
    {


        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];

                }

            }

        }


        int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
        int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
        int ran3 = UnityEngine.Random.Range(0, 4);


        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {



                if (temp_grid[i, y] == 6)
                {

                    int ran4 = UnityEngine.Random.Range(1, sfsize);
                    for (int q = 0; q < ran4; q++)
                    {

                        //     Debug.Log("q");
                        //   Debug.Log("Started" + q);
                        //   int rann2 = UnityEngine.Random.Range(0, 1);
                        //  int rann4 = UnityEngine.Random.Range(0, 1);
                        //   int rann5 = UnityEngine.Random.Range(0, 1);
                        //   int rann6 = UnityEngine.Random.Range(0, 1);
                        //   int rann7 = UnityEngine.Random.Range(0, 1);
                        //   int rann8 = UnityEngine.Random.Range(0, 1);





                        int rann1 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann2 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann3 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann4 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann5 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann6 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann7 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann8 = UnityEngine.Random.Range(1, sfsparsity);

                        //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                        // Top left
                        if (rann1 >= 2)
                        {
                            if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i - 1 - q != i || y + 1 + q != y)
                                {

                                    
                                    if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y + 1 + q] = 6;

                                    }
                                }
                            }

                        }





                        // Top right 
                        if (rann2 >= 2)
                        {

                            if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i + 1 + q != i || y + 1 + q != y)
                                {
                                  
                                    if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y + 1 + q] = 6;
                                    }



                                }
                            }
                        }


                        // Bottom left
                        if (rann3 >= 2)
                        {

                            if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y - 1 - q <= temp_grid.GetLength(1))
                            {
                                if (i - 1 - q != i || y - 1 - q != y)
                                {
                                
                                    if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y - 1 - q] = 6;
                                    }


                                }
                            }
                        }


                        // Bottom right
                        if (rann4 >= 2)
                        {

                            if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y - 1 - q < temp_grid.GetLength(1))
                            {





                                if (i + 1 + q != i || y - 1 - q != y)
                                {
                           
                                    if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y - 1 - q] = 6;

                                    }


                                }





                            }
                        }


                        // Left
                        if (rann5 >= 2)
                        {

                            if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                            {


                                if (i - 1 - q != i)
                                {

                              
                                    if (noise_grid[i - 1 - q, y] == 2)
                                    {

                                        noise_grid[i - 1 - q, y] = 6;
                                    }



                                }


                            }
                        }

                        //Right
                        if (rann6 >= 2)
                        {


                            if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                            {
                                if (i + 1 + q != i)
                                {

                                    if (noise_grid[i + 1 + q, y] == 2)
                                    {

                                        noise_grid[i + 1 + q, y] = 6;
                                    }





                                }


                            }
                        }

                        // Down
                        if (rann7 >= 2)
                        {

                            if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                            {
                                if (y - 1 - q != y)
                                {
                                 
                                    if (noise_grid[i, y - 1 - q] == 2)
                                    {

                                        noise_grid[i, y - 1 - q] = 6;
                                    }


                                }
                            }

                        }


                        // Up
                        if (rann8 >= 2)
                        {
                            if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                            {
                                if (y + 1 + q != y)
                                {
                                 
                                    if (noise_grid[i, y + 1 + q] == 2)
                                    {

                                        noise_grid[i, y + 1 + q] = 6;
                                    }


                                }
                            }
                        }




                    }

                }

            }




        }
    }

    void add_plains(int[,] noise_grid, int pamount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];




        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < pamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);





            // add check that it is land not water easy just do it like checking not mountains



            if (temp_grid[ran, ran2] == 2)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            // !!!!!! add check for not mountains or water here

                            noise_grid[i, y] = 7;

                            //    Debug.Log(ran4)


                            // or then for every hmountain tile do similiar around it to a smaller scale

                            /// It only does it once as then done != false anymore! So it only does it for the first 
                            /// mountain generated
                            ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                            // if (done == false) {
                            int ran4 = UnityEngine.Random.Range(1, psize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, psparsity);
                                int rann2 = UnityEngine.Random.Range(1, psparsity);
                                int rann3 = UnityEngine.Random.Range(1, psparsity);
                                int rann4 = UnityEngine.Random.Range(1, psparsity);
                                int rann5 = UnityEngine.Random.Range(1, psparsity);
                                int rann6 = UnityEngine.Random.Range(1, psparsity);
                                int rann7 = UnityEngine.Random.Range(1, psparsity);
                                int rann8 = UnityEngine.Random.Range(1, psparsity);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);

                                // !!!!  make forests WAYYY more dense 

                                // Add checks for land ect then just do small mountains but just add more forest around it instead

                                // Top left
                                if (rann1 >= 2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y)
                                        {

                                       
                                            // if (noise_grid[i - 1 - q, y + 1 + q] != 3 && noise_grid[i - 1 - q, y + 1 + q] != 4)
                                            if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y + 1 + q] = 7;

                                            }
                                        }
                                    }

                                }





                                // Top right 
                                if (rann2 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                       
                                            // if (noise_grid[i + 1 + q, y + 1 + q] != 3 && noise_grid[i + 1 + q, y + 1 + q] != 4)
                                            if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y + 1 + q] = 7;
                                            }



                                        }
                                    }
                                }


                                // Bottom left
                                if (rann3 >= 2)
                                {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                         
                                            // if (noise_grid[i - 1 - q, y - 1 - q] != 3 && noise_grid[i - 1 - q, y - 1 - q] != 4)
                                            if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y - 1 - q] = 7;
                                            }


                                        }
                                    }
                                }


                                // Bottom right
                                if (rann4 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                        
                                            //if (noise_grid[i + 1 + q, y - 1 - q] != 3 && noise_grid[i + 1 + q, y - 1 - q] != 4)
                                            if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y - 1 - q] = 7;

                                            }


                                        }





                                    }
                                }


                                // Left
                                if (rann5 >= 2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                         
                                            // if (noise_grid[i - 1 - q, y] != 3 && noise_grid[i - 1 - q, y] != 4)
                                            if (noise_grid[i - 1 - q, y] == 2)
                                            {

                                                noise_grid[i - 1 - q, y] = 7;
                                            }



                                        }


                                    }
                                }

                                //Right
                                if (rann6 >= 2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                        
                                            //   if (noise_grid[i + 1 + q, y] != 3 && noise_grid[i + 1 + q, y] != 4)
                                            if (noise_grid[i + 1 + q, y] == 2)
                                            {

                                                noise_grid[i + 1 + q, y] = 7;
                                            }





                                        }


                                    }
                                }

                                // Down
                                if (rann7 >= 2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                         
                                            //if (noise_grid[i, y - 1 - q] != 3 && noise_grid[i, y - 1 - q] != 4 )
                                            if (noise_grid[i, y - 1 - q] == 2)
                                            {

                                                noise_grid[i, y - 1 - q] = 7;
                                            }


                                        }
                                    }

                                }


                                // Up
                                if (rann8 >= 2)
                                {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if (y + 1 + q != y)
                                        {
                                          
                                            //  if (noise_grid[i, y + 1 + q] != 3 && noise_grid[i, y + 1 + q] != 4)
                                            if (noise_grid[i, y + 1 + q] == 2)
                                            {

                                                noise_grid[i, y + 1 + q] = 7;
                                            }


                                        }
                                    }
                                }
                            }





                        }
                    }







                }

            }
        }
    }

    void add_rivers(int[,] noise_grid, int rminamount,  int ramount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];




        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < ramount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);





            // add check that it is land not water easy just do it like checking not mountains



            if (temp_grid[ran, ran2] == 1)
            {

                if (ran - 1 > 0 && ran + 1 > 0 && ran + 1 < temp_grid.GetLength(0)
                        && ran - 1 < temp_grid.GetLength(0)
                      && ran2 - 1 > 0 && ran2 + 1 > 0 && ran2 + 1 < temp_grid.GetLength(1)
                        && ran2 - 1 < temp_grid.GetLength(1)) {




                    if (temp_grid[ran - 1, ran2] >= 2 || temp_grid[ran + 1, ran2] >= 2 ||
                    temp_grid[ran, ran2 - 1] >= 2 || temp_grid[ran, ran2 + 1] >= 2
                    || temp_grid[ran + 1, ran2 + 1] >= 2 || temp_grid[ran - 1, ran2 + 1] >= 2
                    || temp_grid[ran - 1, ran2 - 1] >= 2 || temp_grid[ran + 1, ran2 - 1] >= 2)
                    {

                        for (int i = 0; i < temp_grid.GetLength(0); i++)
                        {

                            for (int y = 0; y < temp_grid.GetLength(1); y++)
                            {

                                if (i == ran && y == ran2)
                                {


                                    // !!!!!! add check for not mountains or water here

                                    noise_grid[i, y] = 1;

                                    //    Debug.Log(ran4)


                                    // or then for every hmountain tile do similiar around it to a smaller scale

                                    /// It only does it once as then done != false anymore! So it only does it for the first 
                                    /// mountain generated
                                    ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                                    // if (done == false) {
                                    int ran4 = UnityEngine.Random.Range(rminamount, rsize);
                                    for (int q = 0; q < ran4; q++)
                                    {

                                        //     Debug.Log("q");
                                        //   Debug.Log("Started" + q);
                                        //   int rann2 = UnityEngine.Random.Range(0, 1);
                                        //  int rann4 = UnityEngine.Random.Range(0, 1);
                                        //   int rann5 = UnityEngine.Random.Range(0, 1);
                                        //   int rann6 = UnityEngine.Random.Range(0, 1);
                                        //   int rann7 = UnityEngine.Random.Range(0, 1);
                                        //   int rann8 = UnityEngine.Random.Range(0, 1);





                                        int rann1 = UnityEngine.Random.Range(1, psparsity);
                                        int rann2 = UnityEngine.Random.Range(1, psparsity);
                                        int rann3 = UnityEngine.Random.Range(1, psparsity);
                                        int rann4 = UnityEngine.Random.Range(1, psparsity);
                                        int rann5 = UnityEngine.Random.Range(1, psparsity);
                                        int rann6 = UnityEngine.Random.Range(1, psparsity);
                                        int rann7 = UnityEngine.Random.Range(1, psparsity);
                                        int rann8 = UnityEngine.Random.Range(1, psparsity);

                                        //Debug.Log("AAAAAAAAAAA " + i+ " " + y);

                                        // !!!!  make forests WAYYY more dense 

                                        // Add checks for land ect then just do small mountains but just add more forest around it instead

                                        // Top left
                                        if (rann1 >= 2)
                                        {
                                            if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                                && y + 1 + q < temp_grid.GetLength(1))
                                            {

                                                if (i - 1 - q != i || y + 1 + q != y)
                                                {

                                                    // if (noise_grid[i - 1 - q, y + 1 + q] != 3 && noise_grid[i - 1 - q, y + 1 + q] != 4)
                                                    if (noise_grid[i - 1 - q, y + 1 + q] >= 2)
                                                    {

                                                        noise_grid[i - 1 - q, y + 1 + q] = 1;

                                                    }
                                                }
                                            }

                                        }





                                        // Top right 
                                        if (rann2 >= 2)
                                        {

                                            if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                                && y + 1 + q < temp_grid.GetLength(1))
                                            {

                                                if (i + 1 + q != i || y + 1 + q != y)
                                                {
                                                 
                                                    // if (noise_grid[i + 1 + q, y + 1 + q] != 3 && noise_grid[i + 1 + q, y + 1 + q] != 4)
                                                    if (noise_grid[i + 1 + q, y + 1 + q] >= 2)
                                                    {

                                                        noise_grid[i + 1 + q, y + 1 + q] = 1;
                                                    }



                                                }
                                            }
                                        }


                                        // Bottom left
                                        if (rann3 >= 2)
                                        {

                                            if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                                && y - 1 - q <= temp_grid.GetLength(1))
                                            {
                                                if (i - 1 - q != i || y - 1 - q != y)
                                                {
                                               
                                                    // if (noise_grid[i - 1 - q, y - 1 - q] != 3 && noise_grid[i - 1 - q, y - 1 - q] != 4)
                                                    if (noise_grid[i - 1 - q, y - 1 - q] >= 2)
                                                    {

                                                        noise_grid[i - 1 - q, y - 1 - q] = 1;
                                                    }


                                                }
                                            }
                                        }


                                        // Bottom right
                                        if (rann4 >= 2)
                                        {

                                            if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                                && y - 1 - q < temp_grid.GetLength(1))
                                            {





                                                if (i + 1 + q != i || y - 1 - q != y)
                                                {
                                               
                                                    //if (noise_grid[i + 1 + q, y - 1 - q] != 3 && noise_grid[i + 1 + q, y - 1 - q] != 4)
                                                    if (noise_grid[i + 1 + q, y - 1 - q] >= 2)
                                                    {

                                                        noise_grid[i + 1 + q, y - 1 - q] = 1;

                                                    }


                                                }





                                            }
                                        }


                                        // Left
                                        if (rann5 >= 2)
                                        {

                                            if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                            {


                                                if (i - 1 - q != i)
                                                {

                                                 
                                                    // if (noise_grid[i - 1 - q, y] != 3 && noise_grid[i - 1 - q, y] != 4)
                                                    if (noise_grid[i - 1 - q, y] >= 2)
                                                    {

                                                        noise_grid[i - 1 - q, y] = 1;
                                                    }



                                                }


                                            }
                                        }

                                        //Right
                                        if (rann6 >= 2)
                                        {


                                            if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                            {
                                                if (i + 1 + q != i)
                                                {

                                               
                                                    //   if (noise_grid[i + 1 + q, y] != 3 && noise_grid[i + 1 + q, y] != 4)
                                                    if (noise_grid[i + 1 + q, y] >= 2)
                                                    {

                                                        noise_grid[i + 1 + q, y] = 1;
                                                    }





                                                }


                                            }
                                        }

                                        // Down
                                        if (rann7 >= 2)
                                        {

                                            if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                            {
                                                if (y - 1 - q != y)
                                                {
                                                 
                                                    //if (noise_grid[i, y - 1 - q] != 3 && noise_grid[i, y - 1 - q] != 4 )
                                                    if (noise_grid[i, y - 1 - q] >= 2)
                                                    {

                                                        noise_grid[i, y - 1 - q] = 1;
                                                    }


                                                }
                                            }

                                        }


                                        // Up
                                        if (rann8 >= 2)
                                        {
                                            if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                            {
                                                if (y + 1 + q != y)
                                                {
                                              
                                                    //  if (noise_grid[i, y + 1 + q] != 3 && noise_grid[i, y + 1 + q] != 4)
                                                    if (noise_grid[i, y + 1 + q] >= 2)
                                                    {

                                                        noise_grid[i, y + 1 + q] = 1;
                                                    }


                                                }
                                            }
                                        }
                                    }





                                }
                            }







                        }

                    }



                }





                  

            }
        }
    }

    void expand_plains(int[,] noise_grid, int pamount)
    {


        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];

                }

            }

        }


        int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
        int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
        int ran3 = UnityEngine.Random.Range(0, 4);


        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {



                if (temp_grid[i, y] == 7)
                {

                    int ran4 = UnityEngine.Random.Range(1, spsize);
                    for (int q = 0; q < ran4; q++)
                    {

                        //     Debug.Log("q");
                        //   Debug.Log("Started" + q);
                        //   int rann2 = UnityEngine.Random.Range(0, 1);
                        //  int rann4 = UnityEngine.Random.Range(0, 1);
                        //   int rann5 = UnityEngine.Random.Range(0, 1);
                        //   int rann6 = UnityEngine.Random.Range(0, 1);
                        //   int rann7 = UnityEngine.Random.Range(0, 1);
                        //   int rann8 = UnityEngine.Random.Range(0, 1);





                        int rann1 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann2 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann3 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann4 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann5 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann6 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann7 = UnityEngine.Random.Range(1, sfsparsity);
                        int rann8 = UnityEngine.Random.Range(1, sfsparsity);

                        //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                        // Top left
                        if (rann1 >= 2)
                        {
                            if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i - 1 - q != i || y + 1 + q != y)
                                {

                                    if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y + 1 + q] = 7;

                                    }
                                }
                            }

                        }





                        // Top right 
                        if (rann2 >= 2)
                        {

                            if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i + 1 + q != i || y + 1 + q != y)
                                {
                                
                                    if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y + 1 + q] = 7;
                                    }



                                }
                            }
                        }


                        // Bottom left
                        if (rann3 >= 2)
                        {

                            if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y - 1 - q <= temp_grid.GetLength(1))
                            {
                                if (i - 1 - q != i || y - 1 - q != y)
                                {
                                   
                                    if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y - 1 - q] = 7;
                                    }


                                }
                            }
                        }


                        // Bottom right
                        if (rann4 >= 2)
                        {

                            if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y - 1 - q < temp_grid.GetLength(1))
                            {





                                if (i + 1 + q != i || y - 1 - q != y)
                                {
                                 
                                    if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y - 1 - q] = 7;

                                    }


                                }





                            }
                        }


                        // Left
                        if (rann5 >= 2)
                        {

                            if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                            {


                                if (i - 1 - q != i)
                                {

                                   
                                    if (noise_grid[i - 1 - q, y] == 2)
                                    {

                                        noise_grid[i - 1 - q, y] = 7;
                                    }



                                }


                            }
                        }

                        //Right
                        if (rann6 >= 2)
                        {


                            if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                            {
                                if (i + 1 + q != i)
                                {

                                  
                                    if (noise_grid[i + 1 + q, y] == 2)
                                    {

                                        noise_grid[i + 1 + q, y] = 7;
                                    }





                                }


                            }
                        }

                        // Down
                        if (rann7 >= 2)
                        {

                            if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                            {
                                if (y - 1 - q != y)
                                {
                                   
                                    if (noise_grid[i, y - 1 - q] == 2)
                                    {

                                        noise_grid[i, y - 1 - q] = 7;
                                    }


                                }
                            }

                        }


                        // Up
                        if (rann8 >= 2)
                        {
                            if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                            {
                                if (y + 1 + q != y)
                                {
                                 
                                    if (noise_grid[i, y + 1 + q] == 2)
                                    {

                                        noise_grid[i, y + 1 + q] = 7;
                                    }


                                }
                            }
                        }




                    }

                }

            }




        }
    }


    void add_lakes(int[,] noise_grid, int lamount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];




        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < lamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);





            // add check that it is land not water easy just do it like checking not mountains



            if (temp_grid[ran, ran2] == 2)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            // !!!!!! add check for not mountains or water here

                            noise_grid[i, y] = 1;

                            //    Debug.Log(ran4)


                            // or then for every hmountain tile do similiar around it to a smaller scale

                            /// It only does it once as then done != false anymore! So it only does it for the first 
                            /// mountain generated
                            ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                            // if (done == false) {
                            int ran4 = UnityEngine.Random.Range(1, lsize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, lsparsity);
                                int rann2 = UnityEngine.Random.Range(1, lsparsity);
                                int rann3 = UnityEngine.Random.Range(1, lsparsity);
                                int rann4 = UnityEngine.Random.Range(1, lsparsity);
                                int rann5 = UnityEngine.Random.Range(1, lsparsity);
                                int rann6 = UnityEngine.Random.Range(1, lsparsity);
                                int rann7 = UnityEngine.Random.Range(1, lsparsity);
                                int rann8 = UnityEngine.Random.Range(1, lsparsity);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);

                                // !!!!  make forests WAYYY more dense 

                                // Add checks for land ect then just do small mountains but just add more forest around it instead

                                // Top left
                                if (rann1 >= 2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y)
                                        {

                                       
                                            // if (noise_grid[i - 1 - q, y + 1 + q] != 3 && noise_grid[i - 1 - q, y + 1 + q] != 4)
                                            if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y + 1 + q] = 1;

                                            }
                                        }
                                    }

                                }





                                // Top right 
                                if (rann2 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                       
                                            // if (noise_grid[i + 1 + q, y + 1 + q] != 3 && noise_grid[i + 1 + q, y + 1 + q] != 4)
                                            if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y + 1 + q] =1;
                                            }



                                        }
                                    }
                                }


                                // Bottom left
                                if (rann3 >= 2)
                                {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                         
                                            // if (noise_grid[i - 1 - q, y - 1 - q] != 3 && noise_grid[i - 1 - q, y - 1 - q] != 4)
                                            if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y - 1 - q] = 1;
                                            }


                                        }
                                    }
                                }


                                // Bottom right
                                if (rann4 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                       
                                            //if (noise_grid[i + 1 + q, y - 1 - q] != 3 && noise_grid[i + 1 + q, y - 1 - q] != 4)
                                            if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y - 1 - q] = 1;

                                            }


                                        }





                                    }
                                }


                                // Left
                                if (rann5 >= 2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                          
                                            // if (noise_grid[i - 1 - q, y] != 3 && noise_grid[i - 1 - q, y] != 4)
                                            if (noise_grid[i - 1 - q, y] == 2)
                                            {

                                                noise_grid[i - 1 - q, y] = 1;
                                            }



                                        }


                                    }
                                }

                                //Right
                                if (rann6 >= 2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                        
                                            //   if (noise_grid[i + 1 + q, y] != 3 && noise_grid[i + 1 + q, y] != 4)
                                            if (noise_grid[i + 1 + q, y] == 2)
                                            {

                                                noise_grid[i + 1 + q, y] = 1;
                                            }





                                        }


                                    }
                                }

                                // Down
                                if (rann7 >= 2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                         
                                            //if (noise_grid[i, y - 1 - q] != 3 && noise_grid[i, y - 1 - q] != 4 )
                                            if (noise_grid[i, y - 1 - q] == 2)
                                            {

                                                noise_grid[i, y - 1 - q] = 1;
                                            }


                                        }
                                    }

                                }


                                // Up
                                if (rann8 >= 2)
                                {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if (y + 1 + q != y)
                                        {
                                          
                                            //  if (noise_grid[i, y + 1 + q] != 3 && noise_grid[i, y + 1 + q] != 4)
                                            if (noise_grid[i, y + 1 + q] == 2)
                                            {

                                                noise_grid[i, y + 1 + q] = 1;
                                            }


                                        }
                                    }
                                }
                            }





                        }
                    }







                }

            }
        }
    }

    void add_bad(int[,] noise_grid, int bamount)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];




        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < bamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);





            // add check that it is land not water easy just do it like checking not mountains



            if (temp_grid[ran, ran2] == 2)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            // !!!!!! add check for not mountains or water here

                            noise_grid[i, y] = 8;

                            //    Debug.Log(ran4)


                            // or then for every hmountain tile do similiar around it to a smaller scale

                            /// It only does it once as then done != false anymore! So it only does it for the first 
                            /// mountain generated
                            ///also will be an out of bounds error if too close to the edge, need to reintroduce checks for edge of map

                            // if (done == false) {
                            int ran4 = UnityEngine.Random.Range(1, bsize);
                            for (int q = 0; q < ran4; q++)
                            {

                                //     Debug.Log("q");
                                //   Debug.Log("Started" + q);
                                //   int rann2 = UnityEngine.Random.Range(0, 1);
                                //  int rann4 = UnityEngine.Random.Range(0, 1);
                                //   int rann5 = UnityEngine.Random.Range(0, 1);
                                //   int rann6 = UnityEngine.Random.Range(0, 1);
                                //   int rann7 = UnityEngine.Random.Range(0, 1);
                                //   int rann8 = UnityEngine.Random.Range(0, 1);





                                int rann1 = UnityEngine.Random.Range(1, bsparsity);
                                int rann2 = UnityEngine.Random.Range(1, bsparsity);
                                int rann3 = UnityEngine.Random.Range(1, bsparsity);
                                int rann4 = UnityEngine.Random.Range(1, bsparsity);
                                int rann5 = UnityEngine.Random.Range(1, bsparsity);
                                int rann6 = UnityEngine.Random.Range(1, bsparsity);
                                int rann7 = UnityEngine.Random.Range(1, bsparsity);
                                int rann8 = UnityEngine.Random.Range(1, bsparsity);

                                //Debug.Log("AAAAAAAAAAA " + i+ " " + y);

                                // !!!!  make forests WAYYY more dense 

                                // Add checks for land ect then just do small mountains but just add more forest around it instead

                                // Top left
                                if (rann1 >= 2)
                                {
                                    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i - 1 - q != i || y + 1 + q != y)
                                        {

                                    
                                            // if (noise_grid[i - 1 - q, y + 1 + q] != 3 && noise_grid[i - 1 - q, y + 1 + q] != 4)
                                            if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y + 1 + q] = 8;

                                            }
                                        }
                                    }

                                }





                                // Top right 
                                if (rann2 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y + 1 + q < temp_grid.GetLength(1))
                                    {

                                        if (i + 1 + q != i || y + 1 + q != y)
                                        {
                                    
                                            // if (noise_grid[i + 1 + q, y + 1 + q] != 3 && noise_grid[i + 1 + q, y + 1 + q] != 4)
                                            if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y + 1 + q] = 8;
                                            }



                                        }
                                    }
                                }


                                // Bottom left
                                if (rann3 >= 2)
                                {

                                    if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                        && y - 1 - q <= temp_grid.GetLength(1))
                                    {
                                        if (i - 1 - q != i || y - 1 - q != y)
                                        {
                                      
                                            // if (noise_grid[i - 1 - q, y - 1 - q] != 3 && noise_grid[i - 1 - q, y - 1 - q] != 4)
                                            if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i - 1 - q, y - 1 - q] = 8;
                                            }


                                        }
                                    }
                                }


                                // Bottom right
                                if (rann4 >= 2)
                                {

                                    if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                        && y - 1 - q < temp_grid.GetLength(1))
                                    {





                                        if (i + 1 + q != i || y - 1 - q != y)
                                        {
                                    
                                            //if (noise_grid[i + 1 + q, y - 1 - q] != 3 && noise_grid[i + 1 + q, y - 1 - q] != 4)
                                            if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                            {

                                                noise_grid[i + 1 + q, y - 1 - q] = 8;

                                            }


                                        }





                                    }
                                }


                                // Left
                                if (rann5 >= 2)
                                {

                                    if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                                    {


                                        if (i - 1 - q != i)
                                        {

                                          
                                            // if (noise_grid[i - 1 - q, y] != 3 && noise_grid[i - 1 - q, y] != 4)
                                            if (noise_grid[i - 1 - q, y] == 2)
                                            {

                                                noise_grid[i - 1 - q, y] = 8;
                                            }



                                        }


                                    }
                                }

                                //Right
                                if (rann6 >= 2)
                                {


                                    if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                                    {
                                        if (i + 1 + q != i)
                                        {

                                       
                                            //   if (noise_grid[i + 1 + q, y] != 3 && noise_grid[i + 1 + q, y] != 4)
                                            if (noise_grid[i + 1 + q, y] == 2)
                                            {

                                                noise_grid[i + 1 + q, y] = 8;
                                            }





                                        }


                                    }
                                }

                                // Down
                                if (rann7 >= 2)
                                {

                                    if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                                    {
                                        if (y - 1 - q != y)
                                        {
                                      
                                            //if (noise_grid[i, y - 1 - q] != 3 && noise_grid[i, y - 1 - q] != 4 )
                                            if (noise_grid[i, y - 1 - q] == 2)
                                            {

                                                noise_grid[i, y - 1 - q] = 8;
                                            }


                                        }
                                    }

                                }


                                // Up
                                if (rann8 >= 2)
                                {
                                    if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                                    {
                                        if (y + 1 + q != y)
                                        {
                                         
                                            //  if (noise_grid[i, y + 1 + q] != 3 && noise_grid[i, y + 1 + q] != 4)
                                            if (noise_grid[i, y + 1 + q] == 2)
                                            {

                                                noise_grid[i, y + 1 + q] = 8;
                                            }


                                        }
                                    }
                                }
                            }





                        }
                    }







                }

            }
        }
    }


    void expand_bad(int[,] noise_grid, int sbamount)
    {


        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];

        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];

                }

            }

        }


        int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
        int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
        int ran3 = UnityEngine.Random.Range(0, 4);


        for (int i = 0; i < temp_grid.GetLength(0); i++)
        {

            for (int y = 0; y < temp_grid.GetLength(1); y++)
            {



                if (temp_grid[i, y] == 8)
                {

                    int ran4 = UnityEngine.Random.Range(1, sbsize);
                    for (int q = 0; q < ran4; q++)
                    {

                        //     Debug.Log("q");
                        //   Debug.Log("Started" + q);
                        //   int rann2 = UnityEngine.Random.Range(0, 1);
                        //  int rann4 = UnityEngine.Random.Range(0, 1);
                        //   int rann5 = UnityEngine.Random.Range(0, 1);
                        //   int rann6 = UnityEngine.Random.Range(0, 1);
                        //   int rann7 = UnityEngine.Random.Range(0, 1);
                        //   int rann8 = UnityEngine.Random.Range(0, 1);





                        int rann1 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann2 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann3 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann4 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann5 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann6 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann7 = UnityEngine.Random.Range(1, sbsparsity);
                        int rann8 = UnityEngine.Random.Range(1, sbsparsity);

                        //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                        // Top left
                        if (rann1 >= 2)
                        {
                            if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i - 1 - q != i || y + 1 + q != y)
                                {

                           
                                    if (noise_grid[i - 1 - q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y + 1 + q] = 8;

                                    }
                                }
                            }

                        }





                        // Top right 
                        if (rann2 >= 2)
                        {

                            if (i + 1 + q >= 0 && y + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y + 1 + q < temp_grid.GetLength(1))
                            {

                                if (i + 1 + q != i || y + 1 + q != y)
                                {
                           
                                    if (noise_grid[i + 1 + q, y + 1 + q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y + 1 + q] = 8;
                                    }



                                }
                            }
                        }


                        // Bottom left
                        if (rann3 >= 2)
                        {

                            if (i - 1 - q >= 0 && y - 1 - q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                                && y - 1 - q <= temp_grid.GetLength(1))
                            {
                                if (i - 1 - q != i || y - 1 - q != y)
                                {
                             
                                    if (noise_grid[i - 1 - q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i - 1 - q, y - 1 - q] = 8;
                                    }


                                }
                            }
                        }


                        // Bottom right
                        if (rann4 >= 2)
                        {

                            if (i + 1 + q >= 0 && y - 1 - q >= 0 && i + 1 + q < temp_grid.GetLength(0)
                                && y - 1 - q < temp_grid.GetLength(1))
                            {





                                if (i + 1 + q != i || y - 1 - q != y)
                                {
                          
                                    if (noise_grid[i + 1 + q, y - 1 - q] == 2)
                                    {

                                        noise_grid[i + 1 + q, y - 1 - q] = 8;

                                    }


                                }





                            }
                        }


                        // Left
                        if (rann5 >= 2)
                        {

                            if (i - 1 - q >= 0 && i - 1 - q < temp_grid.GetLength(0))
                            {


                                if (i - 1 - q != i)
                                {

                                    if (noise_grid[i - 1 - q, y] == 2)
                                    {

                                        noise_grid[i - 1 - q, y] = 8;
                                    }



                                }


                            }
                        }

                        //Right
                        if (rann6 >= 2)
                        {


                            if (i + 1 + q >= 0 && i + 1 + q < temp_grid.GetLength(0))
                            {
                                if (i + 1 + q != i)
                                {

                             
                                    if (noise_grid[i + 1 + q, y] == 2)
                                    {

                                        noise_grid[i + 1 + q, y] = 8;
                                    }





                                }


                            }
                        }

                        // Down
                        if (rann7 >= 2)
                        {

                            if (y - 1 - q >= 0 && y - 1 - q < temp_grid.GetLength(1))
                            {
                                if (y - 1 - q != y)
                                {
                         
                                    if (noise_grid[i, y - 1 - q] == 2)
                                    {

                                        noise_grid[i, y - 1 - q] = 8;
                                    }


                                }
                            }

                        }


                        // Up
                        if (rann8 >= 2)
                        {
                            if (y + 1 + q >= 0 && y + 1 + q < temp_grid.GetLength(1))
                            {
                                if (y + 1 + q != y)
                                {
                 
                                    if (noise_grid[i, y + 1 + q] == 2)
                                    {

                                        noise_grid[i, y + 1 + q] = 8;
                                    }


                                }
                            }
                        }




                    }

                }

            }




        }
    }
   


    void add_hamlets(int[,] noise_grid, int[,] location_grid, int hamletamount, string[,] hamletseeds)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


        //  Debug.Log("Ran 4 = " + ran4);
        bool done = false;

        //  int[] mlocationx = new int[mamount+1];
        //  int[] mlocationy = new int[mamount+1];
        //  int a = 0;
        // int b = 0;



        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < hamletamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);









            if (temp_grid[ran, ran2] >= 2 && temp_grid[ran, ran2] != 6  )
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {



                            //make it go all the way 5 tiles to bottom left
                            //then count it and all the way up and then back down ect for5  tiles including its spawn tile
                            // can do 5 tiles to bottom left to start
                            //and then cities ect will ahve a much bigger aoe


                            // only need to check the 4 corners


                            //divy up all resources? and population is based on certain buildings like farms?
                            //so rich plains has high chance of high population cos lots of good farm land ect
                            //so it oc uld have more farm buildings potentionally
                            // how do population ???





                            //     Debug.Log("q");
                            //   Debug.Log("Started" + q);
                            //   int rann2 = UnityEngine.Random.Range(0, 1);
                            //  int rann4 = UnityEngine.Random.Range(0, 1);
                            //   int rann5 = UnityEngine.Random.Range(0, 1);
                            //   int rann6 = UnityEngine.Random.Range(0, 1);
                            //   int rann7 = UnityEngine.Random.Range(0, 1);
                            //   int rann8 = UnityEngine.Random.Range(0, 1);



                            //Debug.Log("AAAAAAAAAAA " + i+ " " + y);


                            // Top left

                            ////    if (i - 1 - q >= 0 && y + 1 + q >= 0 && i - 1 - q <= temp_grid.GetLength(0)
                            //   && y + 1 + q < temp_grid.GetLength(1))
                            //    {

                            //   if (i - 1 - q != i || y + 1 + q != y)
                            //   {

                            //  Debug.Log("bbbbbbbbbbbbb");
                            //  if (noise_grid[i - 1 - q, y + 1 + q] != 3)
                            //  {


                            // change the 5 to whatever the aoe +1 is for the location type to ensure in bound of array

                            if (i + 5 <= temp_grid.GetLength(0) && y + 5 <= temp_grid.GetLength(1) && i - 5 >= 0 && y -5 >= 0) {




                                //  int a = i - 1;
                                // int a2 = i + 1;
                                // int b = y - 1;
                                // int b2 = y + 1;
                                // int[,] tl = new int[1, 1];
                                // int[,] tr = new int[1, 1];
                                // int[,] bl = new int[1, 1];
                                // int[,] br = new int[1, 1];
                                //  tl[0, 0] = temp_grid[a, b2];
                                // tr[0, 0] = temp_grid[a2, b2];
                                // bl[0, 0] = temp_grid[a, b];
                                // br[0, 0] = temp_grid[a2, b2];




                                string makingseed = "";


                                for (int j = 0; j < 5; j++)
                                {

                                    for (int f = 0; f < 5; f++)
                                    {
                                        int a = temp_grid[i + j, y];
                                    int a2 = temp_grid[i - j, y];

                                    if (j == 1)
                                    {
                                        int m = temp_grid[i, y];

                                        if (m == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (m == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (m == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (m == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (m == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (m == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (m == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }

                                        if (m == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                    }

                                    if (j != 1)
                                    {



                                        //  makingseed = makingseed + "5";
                                        if (a == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }

                                        if (a == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                        if (a2 == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a2 == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a2 == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a2 == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a2 == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a2 == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a2 == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }

                                        if (a2 == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                    }

                                
                                    // below is for up and downs
                                    
                                            int b = temp_grid[i + j, y + f];
                                            int b2 = temp_grid[i - j, y - f];
                                            if (b == 1)
                                            {

                                                makingseed = makingseed + "1";



                                            }
                                            if (b == 2)
                                            {

                                                makingseed = makingseed + "2";



                                            }
                                            if (b == 3)
                                            {

                                                makingseed = makingseed + "3";



                                            }
                                            if (b == 4)
                                            {

                                                makingseed = makingseed + "4";



                                            }
                                            if (b == 5)
                                            {

                                                makingseed = makingseed + "5";



                                            }
                                            if (b == 6)
                                            {

                                                makingseed = makingseed + "6";



                                            }
                                            if (b == 7)
                                            {

                                                makingseed = makingseed + "7";



                                            }
                                            if (b == 8)
                                            {

                                                makingseed = makingseed + "8";



                                            }
                                            if (b2 == 1)
                                            {

                                                makingseed = makingseed + "1";



                                            }
                                            if (b2 == 2)
                                            {

                                                makingseed = makingseed + "2";



                                            }
                                            if (b2 == 3)
                                            {

                                                makingseed = makingseed + "3";



                                            }
                                            if (b2 == 4)
                                            {

                                                makingseed = makingseed + "4";



                                            }
                                            if (b2 == 5)
                                            {

                                                makingseed = makingseed + "5";



                                            }
                                            if (b2 == 6)
                                            {

                                                makingseed = makingseed + "6";



                                            }
                                            if (b2 == 7)
                                            {

                                                makingseed = makingseed + "7";



                                            }
                                            if (b2 == 8)
                                            {

                                                makingseed = makingseed + "8";



                                            }


                                        //  Debug.Log(makingseed);

                                    }


                                 //   Debug.Log(makingseed);


                                    //  temp_grid[i - j, y] 


                                    //  for (int k = 0; y < 4; y++)
                                    // {




                                    // }
                                }



                                /// check the tiles add it into a string for each of each type
                                /// 

                            //    int hamletseed = new int();
                                //  for (int c = 1; c < 8; c++)
                                //      {



                                //    hamletseed[c] = 104;

                                // }


                                //  hamletseed[2] = hamletseed[2] +14;
                                // string all = string.Join("", hamletseed);

                                // so make this take yet another array which stores the values of hamlets only
                                //then run that through a new method which creates a place from it in int and strings? 
                                // and then 

                                //just make the hamlet generating generate the hamlet if it doesnt =0
                                //then replace the hamlet location in the location grid that currently would store the seed
                                //into a completed seed? 
                                //then can run character generation through them or something


                             //  int seed = 0;

                             

                              //  int seed = int.Parse(makingseed);


                                
                               //  hamletseed = seed;

                                //  Debug.Log(hamletseed);
                                //set each number to 000 then just increase 1 by each of that terrain type so its
                                //always 3 numbers per thing apart from the first which is type of settlement




                                // for (int c = 0; c < 8; c++)
                                //  {



                                //  hamletseed[c] = 0;

                                //  }


                                //seed first number is the settlement type then the rest are the amount of tiles around it in order of type

                                //add each of them into an array and then turn the array into a single int? 
                            
                                location_grid[i, y] = 1;

                                hamletseeds[i, y] = makingseed;

                              //  Debug.Log("Hamlet seed : "+hamletseeds[i,y]);
                                //thyen take from this for example 
                                //hamletseed[1] ;





                                // if (i - 4)
                                //  hard coded hamlets to be 4 tiles for a hamlet ect



                            }





                            //make an aoe based on the type like hamlet village ect
                            //so a hamlet is based on 20 tiles in all directions? a square?
                            // then store an array count of how many of each there are? 

                            //(so make it take a 3rd array? or actually make it store an array in the array?
                            //so make it store the location in the location array
                            //but instead of a 1 make it complex based on what is here? so 
                            // 0-20 of water 0-20 of grass 0-20 of high mountains ect
                            //so you then end up with a seed like 112308 (which would mean 11 water 23 grass and 8 mountains

                            // and then make another method that will build from this? it takes the location array, stored at the map coordiates
                            //is the seed and then it procedurally generates the settlement from that, storing it in strings and ints ect?
                            //maybe name it after the coordiates? 
                            //or have the first digits of the seed be to coords? use that to identify it after?
                            //could do a bunch of bools like does it have a church lvl 1 ect
                            //or just do ints, number the buildings so 1 = religious then 1-3 after is the size so a 13 would mean a lvl 3 temple ect

                            //just store it in the location array? ovverwrite the origional seed with a new one? 

                            //have a peope array thats similiar to location? takes the location array and noisegrid

                            // so random chance to have each building, higher chance if it has an abundance of those resources?

                            //and what about how new the settlement is? dont worry about that maybe?


                            //and then buildings can have a requirement like a level 1 temple needs 4 stone?

                            //then when doing characters base it off what the village has as well as what is around it ect



                        }




                    }

                }
            }





            else { hamletamount++; }







        }








    }


    void add_towns(int[,] noise_grid, int[,] location_grid, int hamletamount, string[,] hamletseeds)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];


   


        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < hamletamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);









            if (temp_grid[ran, ran2] >= 2 && temp_grid[ran, ran2] != 6)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            if (i + 10 <= temp_grid.GetLength(0) && y + 10 <= temp_grid.GetLength(1) && i - 10 >= 0 && y - 10 >= 0)
                            {

                                string makingseed = "";


                                for (int j = 0; j < 9; j++)
                                {

                                    for (int f = 0; f < 9; f++)
                                    {
                                        int a = temp_grid[i + j, y];
                                    int a2 = temp_grid[i - j, y];

                                    if (j == 1)
                                    {
                                        int m = temp_grid[i, y];

                                        if (m == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (m == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (m == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (m == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (m == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (m == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (m == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (m == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                    }

                                    if (j != 1)
                                    {



                                        //  makingseed = makingseed + "5";
                                        if (a == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (a == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                        if (a2 == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a2 == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a2 == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a2 == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a2 == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a2 == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a2 == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (a2 == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                    }


                                    // below is for up and downs
                                    
                                        int b = temp_grid[i + j, y + f];
                                        int b2 = temp_grid[i - j, y - f];
                                        if (b == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (b == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (b == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (b == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (b == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (b == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (b == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (b == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }
                                        if (b2 == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (b2 == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (b2 == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (b2 == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (b2 == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (b2 == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (b2 == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (b2 == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }


                                        //  Debug.Log(makingseed);

                                    }


                                    //   Debug.Log(makingseed);


                                    //  temp_grid[i - j, y] 


                                    //  for (int k = 0; y < 4; y++)
                                    // {




                                    // }
                                }



                                /// check the tiles add it into a string for each of each type
                                /// 

                                //    int hamletseed = new int();
                                //  for (int c = 1; c < 8; c++)
                                //      {



                                //    hamletseed[c] = 104;

                                // }


                                //  hamletseed[2] = hamletseed[2] +14;
                                // string all = string.Join("", hamletseed);

                                // so make this take yet another array which stores the values of hamlets only
                                //then run that through a new method which creates a place from it in int and strings? 
                                // and then 

                                //just make the hamlet generating generate the hamlet if it doesnt =0
                                //then replace the hamlet location in the location grid that currently would store the seed
                                //into a completed seed? 
                                //then can run character generation through them or something


                                //  int seed = 0;



                                //  int seed = int.Parse(makingseed);



                                //  hamletseed = seed;

                                //  Debug.Log(hamletseed);
                                //set each number to 000 then just increase 1 by each of that terrain type so its
                                //always 3 numbers per thing apart from the first which is type of settlement




                                // for (int c = 0; c < 8; c++)
                                //  {



                                //  hamletseed[c] = 0;

                                //  }


                                //seed first number is the settlement type then the rest are the amount of tiles around it in order of type

                                //add each of them into an array and then turn the array into a single int? 

                                location_grid[i, y] = 1;

                                hamletseeds[i, y] = makingseed;
                                //  Debug.Log("Hamlet seed : "+hamletseeds[i,y]);
                                //thyen take from this for example 
                                //hamletseed[1] ;





                                // if (i - 4)
                                //  hard coded hamlets to be 4 tiles for a hamlet ect



                            }





                            //make an aoe based on the type like hamlet village ect
                            //so a hamlet is based on 20 tiles in all directions? a square?
                            // then store an array count of how many of each there are? 

                            //(so make it take a 3rd array? or actually make it store an array in the array?
                            //so make it store the location in the location array
                            //but instead of a 1 make it complex based on what is here? so 
                            // 0-20 of water 0-20 of grass 0-20 of high mountains ect
                            //so you then end up with a seed like 112308 (which would mean 11 water 23 grass and 8 mountains

                            // and then make another method that will build from this? it takes the location array, stored at the map coordiates
                            //is the seed and then it procedurally generates the settlement from that, storing it in strings and ints ect?
                            //maybe name it after the coordiates? 
                            //or have the first digits of the seed be to coords? use that to identify it after?
                            //could do a bunch of bools like does it have a church lvl 1 ect
                            //or just do ints, number the buildings so 1 = religious then 1-3 after is the size so a 13 would mean a lvl 3 temple ect

                            //just store it in the location array? ovverwrite the origional seed with a new one? 

                            //have a peope array thats similiar to location? takes the location array and noisegrid

                            // so random chance to have each building, higher chance if it has an abundance of those resources?

                            //and what about how new the settlement is? dont worry about that maybe?


                            //and then buildings can have a requirement like a level 1 temple needs 4 stone?

                            //then when doing characters base it off what the village has as well as what is around it ect



                        }




                    }

                }
            }





            else { hamletamount++; }







        }








    }

    void add_citys(int[,] noise_grid, int[,] location_grid, int hamletamount, string[,] hamletseeds)
    {



        int[,] temp_grid = new int[noise_grid.GetLength(0), noise_grid.GetLength(1)];





        for (int x = 0; x < count; x++)
        {

            for (int c = 0; c < noise_grid.GetLength(0); c++)
            {


                for (int d = 0; d < noise_grid.GetLength(1); d++)
                {

                    temp_grid[c, d] = noise_grid[c, d];




                }

            }

        }

        for (int x = 0; x < hamletamount; x++)
        {

            int ran = UnityEngine.Random.Range(0, temp_grid.GetLength(0));
            int ran2 = UnityEngine.Random.Range(0, temp_grid.GetLength(1));
            int ran3 = UnityEngine.Random.Range(0, 4);









            if (temp_grid[ran, ran2] != 6)
            {



                for (int i = 0; i < temp_grid.GetLength(0); i++)
                {

                    for (int y = 0; y < temp_grid.GetLength(1); y++)
                    {

                        if (i == ran && y == ran2)
                        {


                            if (i + 20 <= temp_grid.GetLength(0) && y + 20 <= temp_grid.GetLength(1) && i - 20 >= 0 && y - 20 >= 0)
                            {

                                string makingseed = "";


                                for (int j = 0; j < 17; j++)
                                {
                                    for (int f = 0; f < 17; f++)
                                    {
                                        int a = temp_grid[i + j, y];
                                    int a2 = temp_grid[i - j, y];

                                    if (j == 1)
                                    {
                                        int m = temp_grid[i, y];

                                        if (m == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (m == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (m == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (m == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (m == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (m == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (m == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (m == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                    }

                                    if (j != 1)
                                    {



                                        //  makingseed = makingseed + "5";
                                        if (a == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (a == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }

                                        if (a2 == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (a2 == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (a2 == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (a2 == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (a2 == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (a2 == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (a2 == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (a2 == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }


                                    }


                                    // below is for up and downs
                                   
                                        int b = temp_grid[i + j, y + f];
                                        int b2 = temp_grid[i - j, y - f];
                                        if (b == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (b == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (b == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (b == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (b == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (b == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (b == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (b == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }
                                        if (b2 == 1)
                                        {

                                            makingseed = makingseed + "1";



                                        }
                                        if (b2 == 2)
                                        {

                                            makingseed = makingseed + "2";



                                        }
                                        if (b2 == 3)
                                        {

                                            makingseed = makingseed + "3";



                                        }
                                        if (b2 == 4)
                                        {

                                            makingseed = makingseed + "4";



                                        }
                                        if (b2 == 5)
                                        {

                                            makingseed = makingseed + "5";



                                        }
                                        if (b2 == 6)
                                        {

                                            makingseed = makingseed + "6";



                                        }
                                        if (b2 == 7)
                                        {

                                            makingseed = makingseed + "7";



                                        }
                                        if (b2 == 8)
                                        {

                                            makingseed = makingseed + "8";



                                        }


                                        //  Debug.Log(makingseed);

                                    }


                                    //   Debug.Log(makingseed);


                                    //  temp_grid[i - j, y] 


                                    //  for (int k = 0; y < 4; y++)
                                    // {




                                    // }
                                }



                                /// check the tiles add it into a string for each of each type
                                /// 

                                //    int hamletseed = new int();
                                //  for (int c = 1; c < 8; c++)
                                //      {



                                //    hamletseed[c] = 104;

                                // }


                                //  hamletseed[2] = hamletseed[2] +14;
                                // string all = string.Join("", hamletseed);

                                // so make this take yet another array which stores the values of hamlets only
                                //then run that through a new method which creates a place from it in int and strings? 
                                // and then 

                                //just make the hamlet generating generate the hamlet if it doesnt =0
                                //then replace the hamlet location in the location grid that currently would store the seed
                                //into a completed seed? 
                                //then can run character generation through them or something


                                //  int seed = 0;



                                //  int seed = int.Parse(makingseed);



                                //  hamletseed = seed;

                                //  Debug.Log(hamletseed);
                                //set each number to 000 then just increase 1 by each of that terrain type so its
                                //always 3 numbers per thing apart from the first which is type of settlement




                                // for (int c = 0; c < 8; c++)
                                //  {



                                //  hamletseed[c] = 0;

                                //  }


                                //seed first number is the settlement type then the rest are the amount of tiles around it in order of type

                                //add each of them into an array and then turn the array into a single int? 

                                location_grid[i, y] = 1;

                                hamletseeds[i, y] = makingseed;
                                //  Debug.Log("Hamlet seed : "+hamletseeds[i,y]);
                                //thyen take from this for example 
                                //hamletseed[1] ;





                                // if (i - 4)
                                //  hard coded hamlets to be 4 tiles for a hamlet ect



                            }





                            //make an aoe based on the type like hamlet village ect
                            //so a hamlet is based on 20 tiles in all directions? a square?
                            // then store an array count of how many of each there are? 

                            //(so make it take a 3rd array? or actually make it store an array in the array?
                            //so make it store the location in the location array
                            //but instead of a 1 make it complex based on what is here? so 
                            // 0-20 of water 0-20 of grass 0-20 of high mountains ect
                            //so you then end up with a seed like 112308 (which would mean 11 water 23 grass and 8 mountains

                            // and then make another method that will build from this? it takes the location array, stored at the map coordiates
                            //is the seed and then it procedurally generates the settlement from that, storing it in strings and ints ect?
                            //maybe name it after the coordiates? 
                            //or have the first digits of the seed be to coords? use that to identify it after?
                            //could do a bunch of bools like does it have a church lvl 1 ect
                            //or just do ints, number the buildings so 1 = religious then 1-3 after is the size so a 13 would mean a lvl 3 temple ect

                            //just store it in the location array? ovverwrite the origional seed with a new one? 

                            //have a peope array thats similiar to location? takes the location array and noisegrid

                            // so random chance to have each building, higher chance if it has an abundance of those resources?

                            //and what about how new the settlement is? dont worry about that maybe?


                            //and then buildings can have a requirement like a level 1 temple needs 4 stone?

                            //then when doing characters base it off what the village has as well as what is around it ect



                        }




                    }

                }
            }





            else { hamletamount++; }







        }








    }

   
    int [,] Expand(int[,] noise_grid, int scale) 
    {
        int[,] expanded_grid = new int[noise_grid.GetLength(0) * scale, noise_grid.GetLength(1) *scale];




       for (int i = 0; i < expanded_grid.GetLength(0); i++) {

            for (int x = 0; x < expanded_grid.GetLength(1); x++) {


                int y = i / scale;
                int z = x / scale;




                expanded_grid[i, x] = noise_grid[y, z];
                
                


            
            
            }
        
        
        }

        return expanded_grid;
    
    }
   


  //  public OnClick tile { get; private set; }
    void spawnObj(GameObject obj, int width, int height, int[,]cords, string[,]seed)
    {
        obj = Instantiate(obj, new Vector2(width, height), Quaternion.identity);
        obj.transform.parent = this.transform;
       

    }

    void spawnObj2(GameObject obj, int width, int height, int[,] cords, string[,] seed)
    {

        int thisseedint1;
        int thisseedint2;


        thisseedint1 = cords[1, 0];
        thisseedint2 = cords[0, 1];


        obj = Instantiate(obj, new Vector2(width, height), Quaternion.identity);
        obj.transform.parent = this.transform;
        string thisseed = seed[1, 1];



        obj.GetComponent<OnClick>().storedseed = thisseed;

    }
    void Update()
    {

    }

 


}